import style from "./Abouthtml.module.css";
const Abouthtml = () => {
    return(
        <div className="info_layout">
            <div className="subMenu">
                <div className="subItemsWrap">
                    <p><a href="#first">Основи HTML</a></p>
                    <p><a href="#second">Структура HTML-документа</a></p>
                    <p><a href="#third">Задання кольору</a></p>
                    <p><a href="#fourth">Форматування тексту</a></p>
                    <p><a href="#fifth">Блочні елементи</a></p>
                    <p><a href="#sixth">Списки</a></p>
                    <p><a href="#seventh">Текстові гіперпосилання</a></p>
                    <p><a href="#eighth">Таблиці</a></p>
                    <p><a href="#nineth">Зображення</a></p>
                    <p><a href="#tenth">Медіа</a></p>
                    <p><a href="#eleventh">Форми</a></p>
                    
                </div>
            </div>
            <div className="contentWrap">
            <h1 id="first">HTML</h1>
            <div className={style.content} >
                <h2>Основи HTML. Елементи HTML</h2>
                <p>HTML (Hyper Text Markup Language) – стандартна мова розмітки документів в Інтернеті. <br></br>
<p>Елементи HTML — основні компоненти мови розмітки HTML. Елементи є ієрархічними, тобто для них визначено поняття батька та нащадків. Всі елементи на сторінці є прямими чи непрямими нащадками головного елемента HTML.
Кожен елемент має свою унікальну назву, яка записується латинськими літерами і не чутлива до їх регістру. В загальному вигляді елемент має три складові: теги (початковий та кінцевий), атрибути та зміст (контент).</p>
<p>Тег — це назва елементу розмітки HTML, записана у кутових дужках (&lt; &gt;). Усі теги починаються із символу &lt; і закінчуються символом &gt; – їх називають кутовими дужками. Під час відображення документа в браузері самих тегів не видно, але вони впливають на зовнішній вигляд документа. Після відкритої кутової дужки розміщують ключове слово, яке вказує на призначення тегу. Регістр у назвах тегів не має значення, хоча загальновживаними є великі літери.</p>
Приклади тегів HTML: &lt;TITLE&gt;, &lt;BODY&gt;, &lt;TABLE&gt;, &lt;/A&gt;, &lt;IMG&gt;, &lt;/CENTER&gt;. <br></br>
Приклади парних тегів: &lt;HTML&gt;&lt;/HTML&gt;, &lt;В&gt;&lt;/В&gt;, &lt;HEAD&gt;&lt;/HEAD&gt;,  &lt;ADDRESS&gt;&lt;/ADDRESS&gt;, &lt;LI&gt;&lt;/LI&gt;.<br></br>
Приклади одинарних тегів: &lt;BR&gt;, &lt;HR&gt;, &lt;МЕТА&gt;, &lt;BASEFONT&gt;, &lt;FRAME&gt;, &lt;INPUT&gt;.<br></br><br></br>
<p>Відкривальні теги можуть містити атрибути, які впливають на ефект, створюваний тегом.
Атрибути – це додаткові ключові слова, відокремлені від основного ключового слова тегу та один від одного символами пробілу. Для деяких атрибутів слід задавати значення, яке відділяють від імені атрибута символом =. Значення атрибута беруть у лапки, але в багатьох випадках їх можна і не ставити. Закривальні теги атрибутів не містять.</p>
<p>Приклади тегів з атрибутами:</p>	
<pre>&lt;BODY BGCOLOR="#000000" TEXT="#FFFFFF" BACKGROUND="rain.gif"&gt;<br></br>
&lt;OPTION SELECTED&gt;<br></br>
&lt;FRAME SCR="file.html" NORESIZE&gt;</pre><br></br>
Загальна структура елемента: <pre>&lt;name attribute="value"&gt; контент елемента &lt;/name&gt;. <br></br></pre>
<p>Деякі елементи, можуть не мати атрибутів, інші ж мають обов’язкові атрибути, без яких вони не зможуть виконувати свої функції. Елементи, що не мають змісту - не мають кінцевого тега.
За своїм призначенням та дією елементи HTML можна розділити на три великі категорії: структурні, презентаційні та елементи для інтерактивної взаємодії з користувачем.</p> 
<p>Структурні. Елементи структурної розмітки застосовуються задля опису семантики тексту та задання структури документу. В свою чергу, в залежності від змісту документа, структурні елементи поділяються на: текст, списки, таблиці, гіперпосилання та додаткові об’єкти (зображення, аплети та ін).</p> 
<p>Презентаційні. Елементи презентаційної (візуальної) розмітки застосовуються задля опису зовнішнього вигляду документа та не зазначають при цьому функцій тексту до якого вони застосовуються.</p> 
<p>Інтерактивної взаємодії. Елементи інтерактивної взаємодії дозволяють користувачам впливати на зміст або вигляд документу. Вони поділяються на два види: форми для введення даних користувачами та скрипти для активних документів.</p>
<p>Для того щоб краще зрозуміти HTML-текст в нього вставляють коментарі. <a id="second"></a> Коментарі  починаються зі спеціального тегу &lt;!–. Будь-який записаний після нього текст браузер розглядає як коментар і не відображає під час відтворення документа. Закінчують коментар тегом –&gt;. Коментар може містити будь-які символи, крім &gt;, а отже, не може включати в себе теги.</p>

    </p>
    </div>
    <div className={style.content}>
        <h2>Структура HTML-документа</h2>
        <p>HTML-документ складається з основного тексту і тегів розмітки. Фактично це звичайний текстовий файл, для створення і редагування якого можна використати будь-який текстовий редактор. Зазвичай HTML-документи містяться у файлах із розширенням .html.
<p>Елемент &lt;!DOCTYPE&gt; призначений для вказівки типу поточного документа - DTD (document type definition, опис типу документа). Це необхідно, щоб браузер розумів, як слід інтерпретувати поточну веб-сторінку, адже HTML існує в декількох версіях, крім того, є XHTML (EXtensible HyperText Markup Language, розширена мова розмітки гіпертексту), схожа на HTML, але відрізняється від неї по синтаксису. Щоб браузер не плутався і розумів, згідно якого стандарту відображати сторінку, необхідно в першому рядку коду задавати &lt;!DOCTYPE&gt;.</p>
Синтаксис:<br></br>
<pre>&lt;!DOCTYPE [елемент верхнього рівня] [Публічність] "[Реєстрація]//[Організація]//[Тип] [Ім’я]//[Мова]" "[URL]"&gt;</pre><br></br><br></br>
Параметры:<br></br>
<p>Елементи верхнього рівня — показують елемент верхнього рівня у документі, для HTML це тег &lt;html&gt;. </p>
<p>Публічність — об’єкт є публічним (значення PUBLIC) або системним ресурсом (значення SYSTEM), наприклад, таким як локальний файл. Для HTML/XHTML вказується значення PUBLIC. </p>
<p>Реєстрація — повідомляє, що розробник DTD зареєстрований у міжнародній організації по стандартизації <a id="third"></a> (International Organization for Standardization, ISO). Приймає одне з двох значень: плюс (+) - розробник зареєстрований в ISO і - (мінус) - розробник не зареєстрований. Для W3C значення ставиться «-».</p>
<p>Організація — унікальна назва організації, яка розробила DTD. Офіційно HTML/XHTML публікує W3C, ця назва і пишеться в &lt;!DOCTYPE&gt;.</p>  
</p>
    </div>
    <div className={style.content}>
        <h2>Задання кольору в HTML-документі</h2>
        <p>В HTML колір задається одним з двох шляхів: за допомогою шістнадцяткового коду чи за назвою для деяких основних кольорів. Переважно використовується спосіб, заснований на шістнадцятковій системі числення, як більш універсальний.<br></br>
Щоб не виникало плутанини у визначенні системи числення, перед шістнадцятковим числом ставиться символ решітки #, наприклад #fa8e47. Наступний опис задає помаранчевий колір тла сторінки: &lt;body bgcolor="#fa8e47"&gt;. Перші дві цифри (FA) визначають червону складову кольору, цифри з третьої по четвертую (8E) - зелену, а останні дві цифри (47) - синю. Кожен з трьох кольорів - червоний, зелений і синій - може приймати значення від 00 до FF, що в результаті утворює 256 відтінків. Таким чином, загальна кількість кольорів може бути 256х256х256 = 16.777.216 комбінацій. Колірна модель, заснована на червоній, зеленій і синій складових отримала назву RGB (red, green, blue; червоний, зелений, синій). Ця модель адитивна, при якій сумування всіх трьох компонент утворює білий колір.<br></br>
background – задає малюнок, який буде використано для фона;<br></br>
bgproperties="fixed" – забороняє прокрутку фонового зображення разом із сторінкою.<br></br>
Приклад найпростішої сторінки:<br></br><br></br>
<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"<br></br>
 "http://www.w3.org/TR/html4/strict.dtd"&gt;<br></br>
&lt;html&gt;<br></br>
	&lt;head&gt;<br></br>
		&lt;meta charset="utf-8"&gt;<br></br>
		&lt;title&gt; Моя перша сторінка&lt;/title&gt;<br></br>
	&lt;/head&gt;<br></br>
	&lt;body&gt;<br></br> <a id="fourth"></a>
		Текст сторінки<br></br>
	&lt;/body&gt;<br></br>
&lt;/html&gt;<br></br></pre>

</p>
    </div>
    <div className={style.content}>
        <h2>Елементи для форматування тексту</h2>
        <p>Будь-яка кількість пробілів, що йдуть підряд, в браузері відображаються як один.  Немає переносів у тексті. HTML не підтримує розстановку переносів у словах, як це роблять текстові редактори, всі слова пишуться без розбиття. Короткі рядки при цьому розтягуються за рахунок автоматичного додавання пробілів між словами. Текст займає ширину вікна браузера. Якщо написати один довгий рядок в коді HTML, то в браузері він буде відформатований, щоб текст помістився по ширині в вікно. Якщо введений рядок без пробілів і він ширше вікна браузера, то з'явиться горизонтальна смуга прокручування.<br></br>
Для форматування виводу тексту застосовуються наступні елементи:<br></br>
&lt;b&gt; - написання тексту жирним шрифтом. <br></br><br></br>
Приклад: Текст. &lt;b&gt;Жирний текст.&lt;/b&gt; Текст.<br></br><br></br>
Виведеться наступним чином: Текст.  Жирний текст. Текст.<br></br>
&lt;strong&gt; - призначений для акцентування тексту. Браузери відображають такий текст жирним накресленням.<br></br>
&lt;i&gt; - вивід тексту курсивом.<br></br>
&lt;em&gt; - призначений для акцентування тексту. Браузери відображають такий текст курсивом.<br></br><br></br>
<p>Слід зазначити, що теги &lt;i&gt; і &lt;em&gt;, також як &lt;b&gt; і &lt;strong&gt;, незважаючи на схожість результату, є не зовсім еквівалентними і замінюваними. Перший тег &lt;i&gt; - є тегом фізичної розмітки і встановлює курсивний текст, а тег &lt;em&gt; - тегом логічної розмітки і визначає важливість поміченого тексту. Такий поділ тегів на логічне і фізичне форматування призначався, щоб зробити HTML універсальним, в тому числі незалежним від пристрою виводу інформації. Теоретично, якщо скористатися, наприклад, мовним браузером, то текст, оформлений за допомогою тегів &lt;i&gt; і &lt;em&gt;, буде відзначений по-різному. Однак вийшло так, що в популярних браузерах результат використання цих тегів рівнозначний.<br></br>
&lt;sub&gt; - нижній індекс. Текст розташовується нижче базової лінії інших символів рядка і зменшеного розміру - H2O.<br></br>
&lt;sup&gt; - верхній індекс -  x2+bx+c=0.<br></br>
&lt;big&gt; збільшує розмір шрифту на одиницю в порівнянні зі звичайним текстом. В HTML розмір шрифту вимірюється в умовних одиницях від 1 до 7, середній розмір тексту, що використовується за замовчуванням, прийнятий 3. Таким чином, додавання тега &lt;big&gt; збільшує текст на одну умовну одиницю.<br></br>
&lt;small&gt; - зменшує розмір шрифту на одиницю. Протилежний до &lt;big&gt;.<br></br>
&lt;br&gt; - перехід на новий рядок в тому місці, де цей тег розташований. На відміну від тега абзацу &lt;p&gt;, використання тега &lt;br&gt; не додає порожній відступ перед рядком. Якщо текст, в якому використовується перехід рядка, обтікає плаваючий елемент, то за допомогою атрибуту clear тега &lt;br&gt; можна зробити так, щоб наступний рядок починався нижче елемента. Атрибут clear повідомляє браузеру, як обробляти наступний рядок, якщо текст обтікає плаваючий елемент.</p>
<p>Плаваючим елементом називається зображення, у якого встановлений атрибут align або елемент, до якого застосовується стильова властивість float. Результат використання clear залежить від краю, по якому вирівнюється елемент і значення clear. Так, якщо зображення вирівнюється по лівому краю, а значення атрибуту clear тега &lt;br&gt; встановлено як all або left, то текст після тега &lt;br&gt; буде відображатися нижче малюнка. Будь-які інші значення clear змусять текст розташовуватися праворуч від зображення і обтікати його.</p>
Наведені вище елементи можна комбінувати між собою, дотримуючись правил  вкладеності<br></br>
&lt;b&gt;xxxx&lt;i&gt;xxxx&lt;/i&gt; xxx&lt;sub&gt;&lt;i&gt;x&lt;/i&gt;&lt;/sub&gt;&lt;/b&gt; вірно, а 
&lt;/b&gt;xxxx&lt;i&gt;xxxxx&lt;big&gt;&lt;sub&gt; x&lt;/big&gt;&lt;/sub&gt;&lt;b&gt; - ні. <br></br><br></br>
Він містить такі помилки: <br></br> <a id="fifth" ></a>
а) &lt;i&gt; немає закриваючого тега;<br></br>
б) &lt;b&gt; спочатку йде закриваючий тег, потім відкриваючий;<br></br>
в) &lt;big&gt; i &lt;sub&gt; неправильно вкладені один в одного.


</p>
    </div>
    <div className={style.content}>
        <h2>Блочні елементи</h2>
        <p>
        Елемент &lt;div&gt; відноситься до універсальних блочних контейнерів і застосовується в тих випадках, де потрібні блочні елементи без додаткових властивостей.<br></br>
Елемент &lt;p&gt; визначає параграф (абзац) тексту. Завжди починається з нового рядка. Абзаци тексту, що йдуть один за одним розділяються між собою порожнім рядком. Якщо закриваючого тега немає, вважається, що кінець абзацу збігається з початком наступного блокового елемента. Якщо відступи між абзацами не потрібні, то для переходу на новий рядок слід використовувати &lt;br&gt;.
&lt;h1&gt;, ..., &lt;h6&gt; - ця група тегів визначає текстові заголовки різного рівня. Заголовки виконують важливу функцію на веб-сторінці. По-перше, вони показують важливість розділу до якого відносяться. Чим більше заголовок і його рівень, тим більше він значимий. По-друге, за допомогою різних заголовків легко регулювати розмір тексту. Чим вище рівень заголовка, тим більше розмір шрифту. Верхнім рівнем є рівень 1 (&lt;h1&gt;), а нижнім – 6. І, по-третє, пошукові сервіси додають рейтинг тексту, якщо він знаходиться всередині тега заголовка. Це важливо для потрапляння в перші рядки результату в пошуковій системі за ключовими словами.
За допомогою атрибуту align, у будь-якому з наведених вище блоків, можна вирівнювати текст всередині цього контейнера. Він може приймати одне з наступних значень left (по лівому краю), center (по центру),  right (по правому краю), justify (по всій ширині контейнера). За замовчуванням встановлено left. Також, можливе застосування атрибуту style, який записується згідно правил синтаксису CSS і буде розглянуто далі.
Елемент &lt;pre&gt; задає блок попередньо форматованого тексту. Такий текст відображається зазвичай моноширінним шрифтом і з усіма пробілами між словами. В HTML будь-яку кількість пробілів, що йдуть в коді поспіль на веб-сторінці відображається як один. Тег &lt;pre&gt; дозволяє обійти цю особливість і відображати текст як потрібно розробнику. Наступні теги не повинні розміщуватися всередині контейнера &lt;pre&gt;: &lt;big&gt;, &lt;img&gt;, &lt;small&gt;, &lt;sub&gt; і &lt;sup&gt;.
Елемент &lt;hr&gt; малює горизонтальну лінію, яка за своїм виглядом залежить від використовуваних атрибутів. Лінія завжди починається з нового рядка, а після неї всі елементи відображаються у наступному рядку. Тег є одинарним.<br></br><br></br>
Приклад сторінки з форматуванням:<br></br>
<br></br>
<pre>
&lt;!DOCTYPE html&gt;<br></br>
&lt;html&gt;<br></br>
&lt;head&gt;<br></br>
		&lt;meta charset="utf-8"&gt;<br></br>
		&lt;title&gt;Форматування тексту&lt;/title&gt;<br></br>
&lt;/head&gt;<br></br>
&lt;body bgcolor="yellow" text="blue"&gt;<br></br>
&lt;h1&gt; Квадратні рівняння &lt;/h1&gt;<br></br>
&lt;h2&gt; Теорема Вієта&lt;/h2&gt;<br></br>
&lt;p&gt;&lt;b&gt;Теорема&lt;/b&gt; - нехай &lt;i&gt;x&lt;sub&gt;1&lt;/sub&gt;&lt;/i&gt;, &lt;i&gt;x&lt;sub&gt;2&lt;/sub&gt;&lt;/i&gt; - розв'язки рівняння &lt;i&gt;ax&lt;sup&gt;2&lt;/sup&gt;+bx+c=0&lt;/i&gt; тоді. &lt;br&gt;<br></br>
&lt;i&gt;x&lt;sub&gt;1&lt;/sub&gt;+x&lt;sub&gt;2&lt;/sub&gt;=-b/a&lt;/i&gt;&lt;/p&gt;	<br></br>
...<br></br>
&lt;hr&gt;<br></br>
&lt;div align="center"&gt;  Доведення &lt;/div&gt;<br></br>
&lt;p&gt; Нехай &hellip; &lt;/p&gt;<br></br> <a id="sixth"></a>
&lt;p align="right"&gt; &lt;big&gt;д&lt;/big&gt;Доведено &copy; &lt;/p&gt;<br></br>
&lt;/body&gt;<br></br>
&lt;/html&gt;</pre>

</p>
    </div>
    <div className={style.content}>
        <h2>Нумеровані та маркеровані списки</h2>
        <p>
        Для подання тексту в структурованому вигляді, коли кожен абзац виділено за допомогою позначки або номера, призначені списки.<br></br>
У HTML-документах використовують три види списків:<br></br>
• невпорядкований (маркерований);<br></br>
• впорядкований (нумерований);<br></br>
• список визначень. <br></br><br></br>
<p>У невпорядкованому списку для виділення елементів використовуються певні позначки (крапки, квадрати тощо). Починається такий список із тегу &lt;UL&gt;, а закінчується – &lt;/UL&gt;. Кожний елемент списку починається з тегу &lt;LI&gt;. Тег &lt;UL&gt; може мати атрибут TYPE, який визначає форму позначки. Цей атрибут набуває таких значень:</p>
disk – зафарбоване коло;<br></br>
circle – коло;<br></br>
square – маленький чорний квадрат.<br></br><br></br>
Приклад  створення маркерованого списка:<br></br>
<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML  4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;<br></br>
&lt;html&gt;<br></br>
 &lt;head&gt;<br></br>
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;<br></br>
  &lt;title&gt;Маркерований список&lt;/title&gt;<br></br>
 &lt;/head&gt;<br></br>
 &lt;body&gt;<br></br>
   &lt;hr&gt;<br></br>
   &lt;ul type="square"&gt;<br></br>
      &lt;li&gt; пункт 1&lt;/li&gt;<br></br>
      &lt;li&gt; пункт 2&lt;/li&gt;<br></br>
      &lt;li&gt; пункт 3&lt;/li&gt;<br></br>
      &lt;li&gt; пункт 4&lt;/li&gt;<br></br>
   &lt;/ul&gt;<br></br>
   &lt;hr&gt;<br></br>
 &lt;/body&gt;<br></br>
&lt;/html&gt;</pre><br></br><br></br>
<p>У впорядкованому списку всі елементи пронумеровані. Починається список із тегу &lt;OL&gt;, а закінчується – &lt;/OL&gt;. Кожний елемент такого списку також починається з тегу &lt;LI&gt;. Тег &lt;OL&gt; може мати атрибут TYPE, який визначає тип нумерації. Цей атрибут набуває таких значень:</p>
А – велика літера;<br></br>
а – мала літера;<br></br>
І – велика римська цифра;<br></br>
і – мала римська цифра;<br></br>
1 – арабська цифра.<br></br><br></br>
<p>У разі потреби за допомогою атрибута START можна задати відмінний від одиниці початковий номер елемента, наприклад &lt;ОL TYPE="I" START="5"&gt;. Нумерований список, початковий елемент якого позначено латинською літерою Е, яка є п’ятою в алфавіті, описують так:</p>
<pre>
&lt;ol TYPE="A" START="5"&gt;<br></br>
&lt;li&gt;Перший елемент списку&lt;/li&gt;<br></br>
&lt;li&gt;Другий елемент списку&lt;/li&gt;<br></br>
&lt;li&gt;Третій елемент списку&lt;/li&gt;<br></br>
&lt;li&gt;Четвертий елемент списку&lt;/li&gt;<br></br>
&lt;/ol&gt;</pre><br></br><br></br>
<p>Список визначень (definition list). Кожен елемент такого списку складається з двох частин: терміна та його визначення. Сам список задається за допомогою контейнера &lt;dl&gt;, термін - тегом &lt;dt&gt;, а його визначення - за допомогою тега &lt;dd&gt;. Вкладення тегів для створення списку визначень продемонстровано в прикладі.</p>
Приклад загальної структури списку визначень:<br></br>
<pre>
&lt;dl&gt;<br></br>
  	 &lt;dt&gt; Термін 1 &lt;/ dt&gt;<br></br> <a id="seventh"></a>
       &lt;dd&gt; Визначення 1 &lt;/ dd&gt;<br></br>
   &lt;dt&gt; Термін 2 &lt;/ dt&gt;<br></br>
       &lt;dd&gt; Визначення 2 &lt;/ dd&gt;<br></br>
&lt;/ dl&gt;</pre>

</p>
    </div>
    <div className={style.content}>
        <h2>Текстові гіперпосилання</h2>
        <p>
        Гіперпосилання – це вказівка для браузера, до якого об’єкта у межах або поза межами HTML-документа він має звернутися. За допомогою гіперпосилань користувачі можуть переходити з однієї веб-сторінки на іншу, завантажувати файли тощо. <br></br>
&lt;a href="URL"&gt; текст посилання &lt;/a&gt;<br></br><br></br>
<p>Для створення гіперпосилання необхідно використовувати теги &lt;А&gt; та &lt;/А&gt;, визначивши для тегу &lt;А&gt; атрибут HREF. Його значенням має бути адреса URL, на яку вказує посилання. Текст посилання розташовують між тегами &lt;А&gt; і &lt;/А&gt;.<br></br>
Якщо веб-сторінка, на яку вказує посилання, розміщена на іншому веб-сайті, то значенням атрибута HREF має бути повна URL-адреса з назвою протоколу включно; такі посилання називають зовнішніми. Якщо ж гіперпосилання вказує на іншу сторінку того самого сайту, то для пошуку документа достатньо задати лише відносний шлях; таке посилання називають внутрішнім.</p>
<p>Невідвідане гіперапосилання. Такий стан характеризується для посилань, які ще не відкривали. За замовчуванням невідвідані текстові посилання зображуються синього кольору і з підкресленням.</p>
<p>Активне гіперапосилання. Посилання позначається як активне в момент його відкриття. Активним посилання стає також, при його виділенні за допомогою клавіатури. Колір такого посилання за замовчуванням червоний.</p>
<p>Відвідане гіперапосилання. Як тільки користувач відкриває документ, на який вказує посилання, воно позначається як відвідане і змінює свій колір на фіолетовий, встановлений за замовчуванням.</p>
За замовчуванням, при переході за посиланням, документ відкривається в поточному вікні або фреймі. При необхідності, ця умова може бути змінена атрибутом target тега &lt;a&gt;. Синтаксис наступний: <br></br>
<pre>
&lt;a target="ім’я вікна"&gt; ... &lt;/a&gt;</pre><br></br><br></br>
Як значення використовується ім’я вікна або фрейму, задане атрибутом name. Якщо встановлено неіснуюче ім’я, то буде відкрито нове вікно. В якості зарезервованих імен застосовуються такі:<br></br>
<p>_blank - завантажує сторінку в нове вікно браузера;</p>
<p>_self - завантажує сторінку в поточне вікно (це значення задається за замовчуванням);</p>
<p>parent - завантажує сторінку у фрейм-батько, якщо фреймів немає, то це значення працює як _self;</p>
<p>_top - скасовує всі фрейми і завантажує сторінку в новному вікні браузера, якщо фреймів немає, то це значення працює як _self.</p>
У прикладі показано, як зробити, щоб посилання відкривалося в новому вікні:<br></br>
<pre>
&lt;p&gt;&lt;a href="new.html" target="_blank"&gt; Відкрити в новому вікні &lt;/a&gt;&lt;/ p&gt;</pre><br></br>
Атрибут target коректно використовувати тільки при перехідному &lt;!DOCTYPE&gt;, при строгому &lt;!DOCTYPE&gt; буде повідомлення про помилку, оскільки в цій версії HTML target вже не підтримується.<br></br><br></br>
Атрибут title додає пояснювальний текст до посилання у вигляді підказки. Така підказка відображається, коли курсор миші затримується на посиланні, після чого підказка через деякий час пропадає. Синтаксис наступний: <br></br>
<pre>&lt;a title="текст"&gt; ... &lt;/a&gt;</pre><br></br><br></br>
Приклад створення підказки:<br></br>
<pre>&lt;p&gt; &lt;a href="zoo.html" title="Малюнки різних тварин і не тільки..."&gt; Малюнки &lt;/a&gt;&lt;/ p&gt;</pre><br></br>
<p>Якщо в атрибуті HREF задати адресу електронної пошти зі словом mailto: перед нею, то після вибору такого посилання можна надіслати електронний лист, де в полі Кому буде записано цю адресу.</p>
<pre>&lt;p&gt; &lt;a href="mailto:vlad@htmlbook.ru"&gt; Задавайте питання по електронній адресі &lt;/a&gt;&lt;/ p&gt;</pre><br></br>
<p>Якорем називається закладка з унікальним ім’ям на певному місці веб-сторінки, призначена для створення переходу до неї за посиланням. Якір зручно застосовувати в документах великого об'єму, щоб можна було швидко переходити до потрібного розділу.<br></br>
<p>Для визначення якоря використовують теги &lt;А&gt; і &lt;/А&gt;, але замість атрибута HREF задають атрибут NAME, значенням якого має бути ім’я якоря. Воно може складатися з літер та цифр, але не повинно містити символів пробілу. Якщо на сторінці є кілька міток, то всі вони повинні мати різні назви. Синтаксис наступний:</p></p>
<pre>&lt;a name=" назва_мітки "&gt; &lt;/a&gt;</pre> <br></br>
<p>Для створення посилання на встановлений якір потрібно у тегу &lt;А&gt; зазначити його ім’я в кінці адреси URL після імені документа, відокремивши його символом #. Символ # вказує на те, що після нього записано назву мітки, а не ім’я файлу.<br></br></p>
Посилання на мітку всередині поточного документа задають так:<br></br>
<pre>&lt;А HREF="#назва_мітки"&gt;Текст посилання&lt;/А&gt;.<br></br>
 &lt;P&gt; &lt;a href="#top"&gt; Наверх &lt;/a&gt; &lt;/ p&gt;</pre><br></br><br></br>
Посилання на мітку всередині іншого документа задають так:<br></br>
<pre>&lt;a href="text.html#bottom"&gt;Перейти до нижньої частини тексту&lt;/a&gt;</pre><br></br><br></br>
Універсальні атрибути:<br></br>
●	аccesskey дозволяє отримати доступ до елементу за допомогою заданого сполучення клавіш: &lt;a accesskey="c"&gt;...&lt;/a&gt;;<br></br>
●	class визначає ім’я класу, яке дозволяє зв’язати тег зі стильовим оформленням: class="ім’я";<br></br>
●	contextmenu встановлює контекстне меню для елемента: contextmenu="ідентифікатор";<br></br>
●	hidden приховує вміст елемента від перегляду: &lt;a hidden&gt;;<br></br>
●	id вказує ім’я стильового ідентифікатора: id="ім’я";<br></br>
●	style застосовується для визначення стилю елемента за допомогою правил CSS: style="правила описання стилів";<br></br>
●	tabindex встановлює порядок отримання фокусу при переході між елементами за допомогою клавіші Tab: tabindex="число";<br></br><a id="eighth"></a>
●	title описує вміст елемента у вигляді підказки: title="текст".<br></br>
</p>
</div>
<div className={style.content}>
    <h2>Таблиці</h2>
    
    <p>
        <p>Таблиця складається з рядків і стовпців, які можуть містити текст і малюнки. Зазвичай таблиці використовуються для впорядкування і представлення даних. За допомогою таблиць зручно верстати макети сторінок, розташувавши потрібним чином фрагменти тексту і зображень.</p>
        <p>
        Для створення таблиці використовують чотири елементи. Таблицю описують за допомогою тегів &lt;TABLE&gt;...&lt;/TABLE&gt;, вона повинна мати один або кілька рядків &lt;TR&gt;...&lt;/TR&gt;, у кожному з яких може міститися заголовок &lt;ТН&gt;...&lt;/ТН&gt; або дані (комірки з даними) &lt;TD&gt;...&lt;/TD&gt;. Текст в комірці, оформленої за допомогою тега &lt;ТН&gt;, відображається браузером шрифтом жирного накреслення і вирівнюється по центру. В іншому, різниці між тегами &lt;TD&gt; і &lt;ТН&gt; немає.
        </p>
        <p>
        По замовчуванню таблиця має невидимі межі комірок. Для того щоб зробити їх видимими, використовують атрибут BORDER, який має цілочислове значення, що визначає товщину рамки в пікселях, наприклад &lt;TABLE BORDER=5&gt;.
        </p>
        <p>Таблиця може мати заголовок, який задається тегами &lt;CAPTION&gt; та &lt;/CAPTION&gt;. Тег &lt;CAPTION&gt; може містити атрибут ALIGN з одним із значень top або bottom, які визначають розташування заголовка відповідно перед таблицею або після неї (по замовчуванню встановлено значення top). Наприклад, <pre>&lt;CAPTION ALIGN=bottom&gt;Poзклaд уроків&lt;/САРТІОN&gt;</pre></p>
        <p>Кожний рядок таблиці починається з тегу &lt;TR&gt; і закінчується тегом &lt;/TR&gt;. Якщо рядок містить заголовки стовпців таблиці, то використовують теги &lt;ТН&gt; і &lt;/ТН&gt;, якщо ж дані, то &lt;TD&gt; і &lt;/TD&gt;.</p>
        <p>
            <pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;<br></br>
&lt;html&gt;<br></br>
&lt;head&gt;<br></br>
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;<br></br>
&lt;title&gt;Заголовок таблиці&lt;/title&gt;<br></br>
&lt;/head&gt;<br></br>
&lt;body&gt;<br></br>
&lt;table border="1" width="100%" cellpadding="5"&gt;<br></br>
&lt;tr&gt;<br></br>
    &lt;th&gt; Комірка 1&lt;/th&gt;<br></br>
    &lt;th&gt; Комірка 2&lt;/th&gt;<br></br>
&lt;/tr&gt;<br></br>
&lt;tr&gt;<br></br>
    &lt;td&gt; Комірка 3&lt;/td&gt;<br></br>
    &lt;td&gt; Комірка 4&lt;/td&gt;<br></br>
&lt;/tr&gt;<br></br>
&lt;/table&gt;<br></br>
&lt;/body&gt;<br></br>
&lt;/html&gt;<br></br><a id="nineth"></a>
            </pre>
        </p>
    </p>
</div>
<div className={style.content}>
    <h2>Зображення</h2>
    <p>
    Найбільш розповсюдженими в Інтернеті  серед графічних форматів файлів є формати GIF, JPG (JPEG) та PNG. 
    </p>
    <p>
    Для задання фону сторінки у вигляді малюнка в тезі &lt;BODY&gt; використовують атрибут BACKGROUND, значенням якого є URL-адреса файлу зображення. Наприклад, тег &lt;BODY BACKGROUND="1. jpg"&gt; визначає, що для фонового заповнення веб-сторінки буде використано файл 1.jpg.
    </p>
    <p>
    Приклад HTML-коду сторінки, в якої тло оформлене у вигляді малюнка, що міститься у файлі mone.jpg.
    <pre>
&lt;HTML&gt;<br></br>
&lt;TITLE&gt;Моя фірма&lt;/TITLE&gt;<br></br>
&lt;BODY BACKGROUND="mone.jpg"&gt;<br></br>
&lt;H1&gt;&lt;A HREF="l.html"&gt;Наша продукція&lt;/А&gt;&lt;/Н1&gt;<br></br>
&lt;H1&gt;&lt;A HREF="2.html"&gt;Наші замовники&lt;/А&gt;&lt;/Н1&gt;<br></br>
&lt;/BODY&gt;<br></br>
 &lt;/HTML&gt;<br></br>
    </pre>
    </p>
    <p>Для розміщення малюнків у HTML-документі використовують одинарний тег &lt;img&gt;. Він має обов’язковий атрибут SRC, значенням якого є URL-адреса файлу зображення, записана в абсолютній (повністю) або відносній формі (починаючи від поточного каталогу; при цьому ≪батьківський≫ каталог позначають за допомогою двох крапок і слешу (. . /)). Під час відкривання документа браузер завантажує малюнок і відображає його в тому місці документа, де розташований тег &lt;IMG&gt;.</p>
    <p>
    Графічний об’єкт буде показаний на веб-сторінці у своїх реальних розмірах. Якщо є потреба у їх зміні (масштабуванні об’єкта),   можна задати за допомогою атрибутів WIDTH та HEIGHT.
    </p>
    <p>Для того щоб картинка не була розташована впритул до тексту, можна задати відступи. Це роблять за допомогою атрибута HSPASE для бокових полів та атрибута VSPASE для верхнього і нижнього полів. Значення аргументів задають у вигляді чисел, що визначають розміри відступів у пікселях.</p>
    <p>
        <pre>
&lt;HTML&gt;<br></br>
&lt;TITLE&gt;Малюнок&lt;/TITLE&gt;<br></br>
&lt;BODY BACKGROUND="flamingo.jpg"&gt;<br></br>
&lt;IMG SRC="mone.jpg" WIDTH=300 HEIGHT=200 ALT="Фламінго" align="middle" Hspace="10"&gt;<br></br>
&lt;/BODY&gt;<br></br>
&lt;/HTML&gt;<br></br>
        </pre>
        У прикладі, наведеному нижче, задано такі значення атрибутів, що малюнок розміщується ліворуч від тексту, який обтікатиме його. Поля навколо малюнка матимуть розмір 10 пікселів.<a id="tenth"></a>
    </p>
</div>
<div className={style.content}>
    <h2>Медіа</h2>
    <p>
    Тег &lt;EMBED&gt; дає змогу розмістити на веб-сторінці спеціальну панель програвача мультимедійних файлів. Для цього використовують теги &lt;EMBED SRC=. . .&gt;&lt;/EMBED&gt;, наприклад, так:<pre>&lt;EMBED SRC="audio.wav"&gt;&lt;/EMBED&gt;</pre>
    <p>
    Тег &lt;EMBED&gt; може мати такі атрибути:<br/>
    ●	src (значення – URL-адреса) – адреса кліпу;<br/>
●	align – вирівнювання панелі програвача щодо тексту (absmiddle - вирівнювання середини об’єкта по середині поточного рядка; baseline - вирівнювання об’єкта за базовою лінії поточного рядка; bottom - вирівнювання нижньої межі об’єкта по навколишнього тексту; left -  вирівнює об’єкт по лівому краю вікна, текст обтікає його справа; middle - вирівнювання середини об’єкта за базовою лінії поточного рядка; right - вирівнює об’єкт по правому краю вікна, текст обтікає зліва; texttop - верхня межа об’єкта вирівнюється за найвищим текстовому елементу поточного рядка; top - верхня межа об’єкта вирівнюється за найвищим елементу поточного рядка);<br/>
●	width (у пікселах) – ширина програвача;<br/>
●	height (у пікселах) – висота програвача;<br/>
●	autostart (набуває значень true або false) – настроювання автоматичного запуску після завантаження;<br/>
●	repeat (значення true або false) – настроювання повторного програвання;<br/>
●	play_loop – кількість повторень;<br/>
●	hidden (значення true або false) – показати або приховати панель;<br/>
●	hspace - горизонтальний відступ від об’єкта до навколишнього контенту;<br/>
●	pluginspage - адреса сторінки в Інтернеті, звідки можна завантажити і встановити плагін до браузера;<br/>
●	type - MIME-тип об’єкта;<br/>
●	vspace - вертикальний відступ від об’єкта до навколишнього контенту.<br/>
<pre>
&lt;!DOCTYPE html&gt;<br/>
&lt;html&gt;<br/>
&lt;head&gt;<br/>
&lt;meta charset="utf-8"&gt;<br/>
&lt;title&gt;Тег EMBED&lt;/title&gt;<br/>
&lt;/head&gt;<br/>
&lt;body&gt;<br/>
&lt;embed src="images/mouse.swf" width="400" height="300"<br/> 
           type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"&gt;<br/>  
           &lt;/body&gt;<br/>
           &lt;/html&gt;<br/>

</pre>

    </p>
    <p>Тег &lt;video&gt;
Додає, відтворює і управляє настройками відеоролика на веб-сторінці. Шлях до файлу задається через атрибут src або вкладений тег &lt;source&gt;. </p>
<p>Синтаксис:
    <pre>
    &lt;Video&gt;&ltSource src = "URL"&gt;&lt;/ Video&gt;
    </pre>
</p>
<p>
Атрибути:<br></br>
●	autoplay - відео починає відтворюватися автоматично після завантаження сторінки;<br/>
●	controls - додає панель управління до відеоролика;<br/>
●	height - задає висоту області для відтворення відеоролика;<br/>
●	loop - повторює відтворення відео з початку після його завершення;<br/>
●	poster - вказує адресу картинки, яка буде відображатися, поки відео недоступне або не воспроизводится;<br/>
●	preload - використовується для завантаження відео разом із завантаженням веб-сторінки;<br/>
●	src - вказує шлях до воспроизводимому відеоролику;<br/>
●	width - задає ширину області для відтворення відеоролика.<br/> 
</p>
<p>
    <pre>
    &lt;!DOCTYPE html&gt;<br/>
    &lt;html&gt;<br/>
    &lt;head&gt;<br/>
    &lt;meta charset="utf-8"&gt;<br/>
    &lt;title&gt;video&lt;/title&gt;<br/>
    &lt;/head&gt;<br/>
    &lt;body&gt;<br/>
    &lt;video width="400" height="300" controls="controls" &gt;<br/>
    &lt;source src="duel.ogv" type='video/ogg'&gt;<br/>
    &lt;source src="duel.mp4" type='video/mp4'&gt;<br/>
    &lt;source src="duel.webm" type='video/webm'&gt;<br/>
   Тег video не поддерживается вашим браузером. <br/>
   &lt;a href="duel.mp4"&gt;Скачайте видео&lt;/a&gt;<br/>
   &lt;/video&gt;<br/>
   &lt;/body&gt;<br/><a id="eleventh"></a>
   &lt;/html&gt;<br/>

    </pre>
</p>
    </p>
</div>
<div className={style.content}>
    <h2>Форми</h2>
    <p>
    Елемент &lt;form&gt; призначений для створення на веб-сторінці форми. 
    </p>
    <p>
    Форма використовується для обміну даними між користувачем і сервером. Застосування форм не обмежено відправкою даних на сервер, за допомогою клієнтських скриптів можна отримати доступ до будь-якого елементу форми. Документ може містити будь-яку кількість форм, але одночасно на сервер може бути відправлена тільки одна форма. Тому дані форм повинні бути незалежні.
    </p>
    <p>
    Для відправки форми на сервер використовується кнопка Submit, або якщо натиснути клавішу Enter в межах форми. Якщо кнопка Submit відсутня на формі, то клавіша Enter імітує її використання, але тільки у випадку, коли у формі єдиний елемент &lt;input&gt;. Якщо таких елементів два і більше, натискання на &lt;Enter&gt; не дасть ніякого результату.
    </p>
    <p>Коли форма відправляє дані на сервер, управління передається програмі, заданої атрибутом action Попередньо браузер готує інформацію у вигляді пар «ім’я = значення», де ім’я визначається атрибутом name компонентів, вкладених в форму, а значення введено користувачем або встановлене в полі форми за замовчуванням. </p>
    <p>Основні атрибути форми:
    ●	action - вказує обробник, до якого звертаються дані форми при їх відправленні на сервер. Після виконання обробником дій по роботі з даними форми він повертає новий HTML-документ. Якщо атрибут action відсутній, поточна сторінка перезавантажується, повертаючи всі елементи форми до їх значень по замовчуванню. Синтаксис:
<pre>&lt;form action="URL"&gt;
...
&lt;/form&gt;
</pre>
●	method - повідомляє серверу про метод запиту. Може приймати одне із двох значень:
<p>❖	get - цей метод є одним з найпоширеніших і призначений для отримання необхідної інформації та передачі даних в адресному рядку.</p> 
<p>❖	метод post посилає на сервер дані в запиті браузера. Це дозволяє відправляти більшу кількість даних, ніж доступно методом get, оскільки у нього встановлено обмеження в 4 Кб. Великі обсяги даних використовуються в форумах, поштових службах, заповненні бази даних, при пересиланні файлів та ін.</p>
●	target - визначає вікно, в яке буде завантажуватися сторінка. Якщо target не встановлений, повернутий результат показується в поточному вікні. Як значення використовується ім’я вікна або фрейму, що задане атрибутом name. Якщо встановлено неіснуюче ім’я, то буде відкрито нове вікно. В якості зарезервованих імен можна вказувати наступні:
<p>_blank - завантажує сторінку в нове вікно браузера;</p>
<p>
_self - завантажує сторінку в поточне вікно;
</p>
<p>
_parent - завантажує сторінку у батьківський фейм, якщо фреймів немає, то працює як _self;
</p>
<p>
_top - скасовує всі фрейми і завантажує  в повне вікно, якщо фреймів немає, то  працює як _self;
</p>
●	name  -  визначає унікальне ім’я форми. Як правило, ім’я форми використовується для доступу до її елементів за допомогою скриптів;<br/>
●	novalidate - скасовує вбудовану перевірку даних введених користувачем у формі на коректність. Така перевірка здійснюється браузером автоматично при відправці форми на сервер і відбувається для полів &lt;input type = "email"&gt;, &lt;input type = "url"&gt;, а також за наявності атрибуту pattern або required.
<pre>
&lt;!DOCTYPE html&gt;<br/>
&lt;html&gt;<br/>
&lt;head&gt;<br/>
&lt;meta charset="utf-8"&gt;<br/>
&lt;title&gt;Тег FORM, атрибут novalidate&lt;/title&gt;<br/>
&lt;/head&gt;<br/>
&lt;body&gt;  <br/>
&lt;form action="handler.php" novalidate&gt;<br/>
&lt;p&gt;&lt;input required placeholder="Имя"&gt;&lt;/p&gt;<br/>
&lt;p&gt;&lt;input type="email" required placeholder="Ваш email"&gt;&lt;/p&gt;<br/>
&lt;p&gt;&lt;input type="url" required placeholder="Сайт"&gt;&lt;/p&gt;<br/>
&lt;p&gt;&lt;input type="submit"&gt;&lt;/p&gt;<br/>
&lt;/form&gt;<br/>
&lt;/body&gt;<br/>
&lt;/html&gt;<br/>

</pre>
    </p>
</div>

    </div>
        </div>
    );
};

export default Abouthtml;