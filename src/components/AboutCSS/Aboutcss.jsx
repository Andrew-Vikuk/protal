import style from "./Aboutcss.module.css";
const Aboutcss = () => {
    return(
      <div className="info_layout">
          <div className="subMenu">
              <div className="subItemsWrap">
                <p><a href="#first">Основи CSS</a></p>
                <p><a href="#second">Синтаксис CSS</a></p>
                <p><a href="#third">Селектори</a></p>
                <p><a href="#fourth">Спадкування</a></p>
                <p><a href="#fifth">Каскадування</a></p>
                <p><a href="#sixth">Форматування тексту</a></p>
              </div>
            </div>
            
            
            <div className="contentWrap"> 
                <div>
                <h1 id = "first">CSS</h1>
                <h2>Основи CSS</h2>
                <p>
                
                Стиль – це набір правил оформлення та форматування, який можна застосувати до різних елементів веб-документа.<br></br>
Каскадні таблиці стилів (CSS, Cascading Style Sheets) містять параметри форматування частини або всього тексту веб-сторінки. Таблиці каскадних стилів дають змогу визначити єдиний стиль оформлення для різних сторінок документа і швидко модифікувати його зміною відповідного параметра у таблиці стилів.<br></br>
Параметрів форматування, які можна задавати за допомогою стилів, досить багато. Це, зокрема:<br></br><pre>
●	background – колір тла;<br></br>
●	font-family – стиль шрифту (гарнітура);<br></br>
●	font-size – розмір шрифту;<br></br>
●	font-weight – жирність шрифту;<br></br>
●	color – колір шрифту;<br></br>
●	text-decoration – оздоблення тексту;<br></br>
●	text-align – вирівнювання тексту;<br></br>
●	margin-top – відступ від верхнього рядка абзацу;<br></br>
●	line-height – міжрядкова відстань.<br></br></pre>
Є три способи зв’язку каскадних стилів із HTML-документом:<br></br><br></br>
1.	Підключення зовнішньої таблиці стилів (пов’язані стилі).<br></br>
2.	Розташування опису стилів у розділі HEAD документа (глобальні стилі).<br></br>
3.	Задання властивостей стилів безпосередньо в тегах абзаців чи заголовків (вбудовані стилі).<br></br><br></br>
<p>1. Створення та підключення зовнішньої таблиці стилів <br></br>
Зовнішня таблиця стилів (External Style Sheet) – це текстовий файл із розширенням .css. Його підключають до HTML-документа за допомогою тегу &lt;LINK&gt;, який записують у розділі &lt;HEAD&gt;, наприклад:<br></br></p>
<pre>&lt;link rel="stylesheet" type="text/css" href="адреса файлу"&gt;</pre><br></br>
<p>Значення атрибутів  rel і type залишаються незмінними незалежно від коду, як наведено в даному прикладі. Значення href задає шлях до CSS-файлу, він може бути заданий як відносно, так і абсолютно. Зауважимо, що таким чином можна підключати таблицю стилів, яка знаходиться на іншому сайті. Файл зі стилем не зберігає ніяких даних, крім синтаксису CSS. Підключення зовнішньої таблиці стилів:<br></br></p>
<pre>&lt;link rel="stylesheet" href="mysite.css"&gt;</pre><br></br>
Файл зі стилем<br></br>
<pre>H3 &#123;<br></br>
  color: #000080;<br></br>
  font-size: 200%;<br></br>
  font-family: Arial, Verdana, sans-serif;<br></br>
  text-align: center;<br></br>
&#125;<br></br>
P &#123;<br></br>
  padding-left: 20px;<br></br>
&#125;<br></br></pre>
2. Розташування опису стилів у розділі HEAD документа у блоці, який обмежений тегами &lt;style&gt; та &lt;/style&gt;<br></br>
<pre>&lt;head&gt;<br></br>
&lt;style&gt;<br></br>
Тег1 &#123;властивість 11 : значення 11; властивість 12 : значення 12; ...; властивість 1n : значення  1n &#125;<br></br>
Тег2 &#123;властивість 21 : значення 21; властивість 22 : значення 22; ...; властивість 2m : значення 2m&#125;<br></br>
&lt;/style&gt;<br></br>
&lt;/head&gt;<br></br></pre>
 <p>Найпростіша внутрішня таблиця стилів – це послідовність значень тегів, кожне з яких записується, як правило, з нового рядка. Визначення тегу містить його ім’я без кутових дужок, за яким у фігурних дужках через крапку з комою перелічують властивості тегів та їхні значення, розділені двокрапками.<br></br></p>
<p>3. Вбудовані (внутрішні) стилі (Inline Styles) вставляють в теги (теги заголовків &lt;h1&gt;...&lt;h6&gt;, абзацу &lt;p&gt;, тіла &lt;body&gt;, а також у теги &lt;div&gt;, &lt;img&gt; тощо) за допомогою атрибута style, в якому перелічують властивості та їх значення. Наприклад:<br></br></p>
&lt;p style="font-size: 48pt; color: yellow"&gt;<br></br>
<p>Визначені у такий спосіб властивості мають найвищий пріоритет порівняно з іншими, оскільки вони визначені безпосередньо у тегу.<br></br>
Цей підхід використовують для оформлення невеликої кількості елементів.<br/>
&lt;h2 style="font-size: 48pt; font-family: Arial"&gt;Текст...&lt;/h2&gt;<br></br></p>
Приклад:<br></br>
<pre>&lt;!DOCTYPE html&gt;<br></br>
&lt;html&gt;<br></br>
&lt;head&gt;<br></br>
&lt;link rel="stylesheet" href="mysite.css"&gt;<br></br>
&lt;style&gt;<br></br>
 h1 &#123;font-size: 38pt; color: red&#125;<br></br>
 h2 &#123;font-size: 20pt; color: blue&#125;<br></br>
&lt;/style&gt;<br></br>
&lt;title&gt;Приклад використання CSS&lt;/title&gt;<br></br>
&lt;/head&gt;<br></br>
&lt;body&gt;<br></br>
&lt;h1&gt;Для заголовка першого рівня визначено розмір 38 pt, а колір тексту – червоний &lt;/h1&gt;<br></br>
&lt;h2&gt;Для заголовка другого рівня визначено розмір 20 pt, а колір тексту – синій &lt;/h2&gt;<br></br>
&lt;h3&gt;Для заголовка 3 рівня визначено з файла mysite.css &lt;/h3&gt;<br></br>
&lt;h4&gt;Для заголовка 4 рівня визначено з файла mysite.css &lt;/h4&gt;<br></br>
&lt;h2 style="font-size: 48pt; font-family: Arial; color: yellow"&gt; Текст вбудованого стилю (внутрішнього)&lt;/h2&gt;<br></br>
&lt;p&gt;Для цього абзацу стиль не застосовано, для оформлення тексту використано атрибути за умовчанням.&lt;/p&gt;<br></br>
&lt;/body&gt;<br></br>
&lt;/html &gt; <br></br></pre>
Імпорт CSS<br></br>
<p>У поточну стильову таблицю можна імпортувати вміст CSS-файлу за допомогою команди @import. Цей метод допускається використовувати спільно з пов'язаними або глобальними стилями (зовнішні таблиці стилів), але ніяк не з внутрішніми стилями. Загальний синтаксис наступний:<br></br>
import url ("ім'я файлу") типи носіїв;<br></br>
import "ім'я файлу" типи носіїв;<br></br>
Після ключового слова @import вказується шлях до стильового файлу одним з двох наведених способів - за допомогою url або без нього.<br></br></p>
<pre>@import url("style/header.css");<br></br>
@import "/style/main.css" screen; /* Стиль для виведення результату на монітор */<br></br>
@import "/style/smart.css" print, handheld; /* Стиль для друку і смартфона */  </pre><br></br>
Типи носіїв<br></br>
<p>У CSS для вказівки типу носіїв застосовуються команди @import і @media, за допомогою яких можна визначити стиль для елементів залежно від того, виводиться документ на екран або на принтер.<br></br></p>
●	all - всі типи. Це значення використовується за умовчанням;<br></br>
●	aural - мовні синтезатори, а також програми для відтворення тексту вголос. Сюди, наприклад, можна віднести мовні браузери;<br></br>
●	braille - пристрої, засновані на системі Брайля, які призначені для сліпих людей;<br></br>
●	handheld - КПК та аналогічні їм апарати;<br></br>
●	print - друкуючі пристрої на кшталт принтера;<br></br>
●	projection - проектор;<br></br>
●	screen - екран монітора;<br></br>
●	tv - телевізор.<br></br>
Команда @media дозволяє вказати тип носія для глобальних або пов’язаних стилів і в загальному випадку має наступний синтаксис:<br></br>
<pre>@media тип носія 1 &#123;<br></br>
   Опис стилю для типу носія 1<br></br><a id="second"></a>
&#125;<br></br>
@media тип носія 2 &#123;<br></br>
   Опис стилю для типу носія 2<br></br>
&#125;<br></br></pre>



    </p>
    </div>

    <div className={style.content}>
                <h2>Синтаксис CSS</h2>
                <p>
                
                Таблиця стилів складається з набору правил. Кожне правило, у свою чергу, складається з одного або декількох селекторів і блоку визначень, що відносяться до них. Загальний спосіб запису:<br></br>
Селектор&#123;властивість1: значення; властивість2: значення;…; властивістьN: значення;&#125;<br></br>
<p>Селектор - це деяке ім’я стилю, для якого додаються параметри форматування. В якості селектора виступають теги, класи та ідентифікатори. <br></br>
Спочатку пишеться ім’я селектора, наприклад, &lt;table&gt;, це означає, що всі стильові параметри будуть застосовуватися до тегу &lt;table&gt;, потім йдуть фігурні дужки, в яких записується визначення властивостей. Визначення властивостей складається із стильової властивості і її значення, що вказується після двокрапки. Визначення властивостей розділяються між собою крапкою з комою, в кінці цей символ можна опустити.<br></br>
CSS не чутливий до регістру, перенесення рядків, пробілів і символів табуляції, тому форма запису залежить від бажання розробника.<br></br></p>
Приклад<br></br>
Нижче описані ідентичні стилі. <br></br>
	<pre>h1 &#123; color: #a6780a; font-weight: normal; border-bottom: 2px solid black&#125;</pre>
	<pre>H1 &#123;<br></br>
		border-bottom: 2px solid black<br></br>
		color: #a6780a; <br></br>
		font-weight: normal; <br></br>
	&#125; <br></br></pre>
Для селектора допускається додавати кожне правило окремо:<br></br>
<pre>td &#123;background: olive;&#125;<br></br>
td &#123;color: white;&#125;<br></br>
td &#123;border: 1px solid black;&#125;<br></br></pre>
Компактна форма запису<br></br>
<pre>td &#123;<br></br>
   background: olive;<br></br>
   color: white;<br></br>
   border: 1px solid black;<br></br>
&#125;<br></br></pre>
Якщо для селектора спочатку задається властивість з одним значенням, а потім та ж властивість, але вже з іншим значенням, то застосовуватися буде те значення, яке в коді встановлено нижче<br></br>
<pre>p &#123;color: green;&#125;<br></br>
p &#123;color: red;&#125;<br></br></pre>
У даному прикладі для селектора p колір тексту спочатку задається зеленим, а потім червоним. Оскільки значення red розташоване нижче, то воно в підсумку і буде застосовуватися до тексту.<br></br>
Щоб позначити, що текст є коментарем, застосовують наступну конструкцію / * …коментар... * / <br></br>
Приклад <br></br>
<pre>/ * Мій стиль */<br></br>
div &#123;<br></br>
  width: 200px; / * Ширина блоку * /<br></br>
  margin: 10px; / * Поля навколо елемента * /<br></br>
  float: left; / * Обтікання по правому краю * /<br></br>
&#125;<br></br></pre>
<p>Коментарі можна додавати в будь-яке місце CSS-документа, а також писати текст коментаря у кілька рядків. Вкладені коментарі неприпустимі.<br></br>
Значення стильових властивостей<br></br>
Все різні значення стильових властивостей можуть бути зведені до певного типу: рядок, число, відсотки, розмір, колір, адресу або ключове слово.<br></br>
<p>Рядки. Будь-які рядки необхідно брати в подвійні або одинарні лапки. Якщо всередині рядка потрібно використати лапки чи слеш, то необхідно додати перед ними слеш (екранувати символ). <br></br></p>
Приклад "Готель 'Турист'", або "Готель \" Турист \""<br></br>
<p>Числа. Значенням може виступати ціле число, що містить цифри від 0 до 9 і десятковий дріб, в якій ціла і десяткова частина розділяються крапкою. <br></br>
Приклад 500, 3.14<br></br></p></p>
<p>Відсотки. Процентний запис зазвичай застосовується в тих випадках, коли треба змінити значення щодо батьківського елементу або коли розміри залежать від зовнішніх умов. Так, ширина таблиці 100% означає, що вона буде підлаштовуватися під розміри вікна браузера і змінюватися разом з шириною вікна<br></br></p>
<p>Розміри. Для завдання розмірів різних елементів, в CSS використовуються абсолютні і відносні одиниці виміру. Абсолютні одиниці не залежать від пристрою виводу, а відносні одиниці визначають розмір елементу щодо значення іншого розміру. Відносні одиниці зазвичай використовують для роботи з текстом, або коли треба обчислити  співвідношення між елементами.<br></br></p>
<pre>em	Розмір шрифту поточного елементу<br></br>
ex 	Висота символу x<br></br>
px 	Піксель<br></br>
% 	Відсоток<br></br></pre>
<p>Одиниця em це змінюване значення, яке залежить від розміру шрифту поточного елементу (розмір встановлюється через стильову властивість font-size). В кожному браузері закладений розмір тексту, застосовуваний в тому випадку, коли цей розмір явно не заданий. Тому спочатку 1em дорівнює розміру шрифту, заданого в браузері за замовчуванням або розміром шрифту батьківського елементу. Відсотковий запис ідентична em, в тому сенсі, що значення 1em і 100% рівні.<br></br></p>
<p>Одиниця ex визначається як висота символу «x» в нижньому регістрі. На ex розповсюджуються ті ж правила, що і для em, а саме, він прив'язаний до розміру шрифту, заданого в браузері за замовчуванням, або до розміру шрифту батьківського елементу.<br></br></p>
<p>Піксель - це точка певного кольору, що відображається монітором або іншим подібним пристроєм, наприклад, смартфоном. Розмір пікселя залежить від розширення пристрою і його розмірів.<br></br></p>
<p>Відсотковий запис зазвичай застосовується в тих випадках, коли треба змінити значення щодо батьківського елементу або коли розміри залежать від зовнішніх умов. Так, ширина таблиці 90% значить, що вона буде підлаштовуватися під розміри вікна і змінюватися разом з шириною вікна.<br></br></p>
Абсолютні одиниці застосовуються рідше, ніж відносні і зазвичай при роботі з текстом.<br></br>
<pre>in 	Дюйм (1 дюйм дорівнює 2,54 см)<br></br>
cm 	Сантиметр<br></br>
mm 	Міліметр<br></br>
pt 	Пункт (1 пункт дорівнює 1/72 дюйма)<br></br>
pc 	Піка (1 піка дорівнює 12 пунктам)<br></br></pre>
<p>Найпоширенішою одиницею є пункт, який використовується для вказівки розміру шрифту. <br></br></p>
Адреси (URI, Uniform Resource Identifiers, уніфікований ідентифікатор ресурсів) застосовуються для вказівки шляху до файлу, наприклад, для установки фонової картинки на сторінці. Для цього застосовується ключове слово url (), всередині дужок пишеться відносний або абсолютний адресу файлу. При цьому адреса можна задавати в необов’язкових подвійних лапках.<br></br>
<p>Колір в стилях можна задавати трьома способами: за шістнадцятковим значенням, за назвою і в форматі RGB.<br></br>
<p>1. За шістнадцятковим значенням.<br></br>
Для завдання кольорів використовуються числа в шістнадцятковому коді. Шістнадцяткова система, на відміну від десяткової системи, базується, як випливає з її назви, на числі 16. Цифри будуть наступні: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C , D, E, F. Цифри від 10 до 15 замінені латинськими літерами. Числа більше 15 в шістнадцятковій системі утворюються об'єднанням двох чисел в одне. Наприклад, числу 255 в десятковій системі відповідає число FF в шістнадцятковій системі. Щоб не виникало плутанини у визначенні системи числення, перед шістнадцятковим числом ставлять символ решітки  #, наприклад # 666999. Кожен з трьох кольорів - червоний, зелений і синій - може приймати значення від 00 до FF. Таким чином, позначення кольору розбивається на три складові #rrggbb, де перші два символи відзначають червону компоненту кольору, два середніх - зелену, а два останніх - синю. Допускається використовувати скорочену форму виду #rgb, де кожен символ слід подвоювати (#rrggbb). Наприклад, запис # fe0 розцінюється як # ffee00.<br></br></p>
<p>2. За назвою.<br></br></p>
Браузери підтримують деякі кольори по їх назві: <br></br>
<pre>●	white #ffffff або #fff - білий;<br></br>
●	silver # c0c0c0 - сірий;<br></br>
●	gray # 808080 - темно-сірий;<br></br>
●	black # 000000 або # 000 - чорний;<br></br>
●	maroon # 800000 - темно-червоний;<br></br>
●	red # ff0000 або # f00 - червоний;<br></br>
●	orange # ffa500 - помаранчевий;<br></br>
●	yellow # ffff00 або # ff0 - жовтий;<br></br>
●	olive # 808000 - оливковий;<br></br>
●	lime # 00ff00 або # 0f0 - світло-зелений;<br></br>
●	green # 008000 - зелений;<br></br>
●	aqua # 00ffff або # 0ff - блакитний;<br></br>
●	blue # 0000ff або # 00f - синій;<br></br>
●	navy # 000080 - темно-синій;<br></br>
●	teal # 008080 - синьо-зелений;<br></br>
●	fuchsia # ff00ff або # f0f - рожевий;<br></br>
●	purple # 800080 - фіолетовий.<br></br></pre>
<p>3. В форматі RGB.<br></br>
Можна визначити колір, використовуючи значення червоною, зеленою і синій складової в десятковому численні. <a id="third"></a> Значення кожного з трьох кольорів може приймати значення від 0 до 255. Також можна задавати колір у відсотковому відношенні. Спочатку вказується ключове слово rgb, а потім в дужках, вказуються компоненти кольору, наприклад rgb (255, 51, 51) або rgb (100%, 20%, 20%). <br></br></p></p>
В якості значень активно застосовуються ключові слова, які визначають бажаний результат дії стильових властивостей. Ключові слова пишуться без лапок.<br></br>
    </p>
    </div>


    <div className={style.content}>
                <h2>Селектори</h2>
                <p>
                
                В якості селектора може виступати будь-який тег HTML для якого визначаються правила форматування, такі як: колір, фон, розмір і т.д. Ім’я тега, не чутливе до регістра. <br></br>
Тег &#123;властивість 1: значення; властивість 2: значення; ...&#125;<br></br>
 <pre> p &#123;text-align: justify;  color: green;&#125;<br></br></pre>
<p>У даному прикладі змінюється колір тексту і вирівнювання тексту абзацу. Стиль буде застосовуватися тільки до тексту, який розташовується усередині контейнера &lt;p&gt;. Хоча стиль можна застосувати до будь тегу, результат буде помітний тільки для тегів, які безпосередньо відображаються в контейнері &lt;body&gt;.<br></br>
Щоб встановити одночасно один стиль для всіх елементів веб-сторінки, наприклад, задати шрифт або накреслення тексту використовують універсальний селектор, який відповідає будь-якому елементу веб-сторінки. Для позначення універсального селектора застосовується символ зірочки (*) і в загальному випадку синтаксис буде наступний. <pre>*&#123;Опис правил стилю&#125;<br></br></pre></p>
Класи<br></br>
<p>Класи застосовують, коли необхідно визначити стиль для індивідуального елемента сторінки або задати різні стилі для одного тега.  Усередині стилю спочатку пишеться бажаний тег, а потім, через точку користувальницьке ім’я класу (Тег.Ім’я_класу). <br></br></p>
<pre>Тег.Ім’я класу &#123;властивість 1: значення; властивість 2: значення; ...&#125;<br></br></pre>
<p>Імена класів повинні починатися з латинської літери і можуть містити в собі символ дефіса (-) та підкреслення (_). Використання російських букв в іменах класів неприпустимо. Щоб вказати в коді HTML, що тег використовується з певним класом, до тегу додається атрибут class = "Ім’я_класу". <br></br>
Можна, також, використовувати класи і без вказівки тега. Синтаксис в цьому випадку буде наступний: .Ім’я_класу&#123;…&#125;.  При такому записі, клас можна застосовувати до будь-якого тегу.<br></br></p>
<pre>.gost &#123;<br></br>
    color: green; /* Цвет текста */<br></br>
    font-weight: bold; /* Жирное начертание */<br></br>
   &#125;<br></br></pre>
<p>До будь-якого тегу одночасно можна додати кілька класів, перераховуючи їх в атрибуті class через пробіл. У цьому випадку до елементу застосовується стиль, описаний в правилах для кожного класу. Оскільки при додаванні декількох класів вони можуть містити однакові стильові властивості, але з різними значеннями, то береться значення класу, який описаний в коді нижче.<br></br></p>
Ідентифікатор<br></br>
<p>Ідентифікатор («ID селектор») визначає унікальне ім’я елемента, яке використовується для зміни його стилю і звернення до нього через скрипти.<br></br>
При описі ідентифікатора спочатку вказується символ решітки (#), потім йде ім’я ідентифікатора. Воно повинно починатися з латинської символу і може містити в собі символ дефіса (-) та підкреслення (_). Використання російських букв в іменах ідентифікатора неприпустимо.<br></br></p>
<pre>#Ім’я ідентифікатора &#123;властивість 1: значення; властивість 2: значення; ...&#125;<br></br>
#gost &#123;<br></br>
    color: green; /* Цвет текста */<br></br>
    font-weight: bold; /* Жирное начертание */<br></br>
   &#125;<br></br></pre>
Звернення до ідентифікатора відбувається аналогічно класам, але  використовується атрибут id, значенням якого виступає ім’я ідентифікатора. Символ решітки при цьому вже не вказується.<br></br>
<pre>&lt;div id="gost"&gt;<br></br></pre>
Ідентифікатори можна застосовувати до конкретного тегу. <br></br>
<pre>Тег #Ім’я ідентифікатора &#123;властивість 1: значення; властивість 2: значення; ...&#125;<br></br></pre>
Спочатку вказується ім’я тега, потім без пробілів символ решітки та назва ідентифікатора.<br></br>
Періодично піднімається суперечка про доцільність використання ідентифікаторів у верстці. Насправді немає різниці, через що задавати стилі, але слід пам’ятати про деякі особливості ідентифікаторів і класів:<br></br>
<pre>●	у коді документа кожен ідентифікатор унікальний і повинен бути включений лише один раз;<br></br>
●	ім’я ідентифікатора чутливе до регістру;<br></br>
●	стиль для ідентифікатора має пріоритет вище, ніж у класів;<br></br>
●	клас може використовуватися в коді неодноразово для різних елементів;<br></br>
●	імена класів чутливі до регістра;<br></br>
●	класи можна комбінувати між собою, додаючи кілька класів до одного тегу.<br></br></pre>
При створенні веб-сторінки часто доводиться вкладати одні елементи в інші. Щоб стилі для цих тегів застосовувалися коректно Існують селектори, які працюють тільки в певному контексті. Наприклад, можна задати стиль для тега &lt;b&gt; тільки коли він розташовується усередині контейнера &lt;p&gt;.<br></br>
Контекстний селектор складається з простих селекторів розділених пропуском.  Синтаксис:<br></br>
<pre>Тег1 Тег2 &#123;...&#125;<br></br></pre>
У цьому випадку стиль буде застосовуватися до Тега2 коли він розміщується всередині Тега1, тобто <pre>&lt;Тег1&gt;  &lt;Тег2&gt; ... &lt;/ Тег2&gt; &lt;/ Тег1&gt;.<br></br></pre>
Сусідніми називаються селектори, коли вони йдуть безпосередньо один за одним у коді документа.<br></br>
<pre>&lt;p&gt; Lorem &lt;b&gt; ipsum &lt;/ b&gt; dolor sit amet, &lt;i&gt; consectetuer &lt;/ i&gt; adipiscing &lt;tt&gt; elit &lt;/ tt&gt;. &lt;/ P&gt;</pre><br></br>
Сусідніми тут є теги &lt;b&gt; і &lt;i&gt;, а також &lt;i&gt; і &lt;tt&gt;. При цьому &lt;b&gt; і &lt;tt&gt; до сусідніх елементів не належать через те, що між ними розташований контейнер &lt;i&gt;.<br></br>
<pre>&lt;p&gt; Lorem ipsum &lt;b&gt; dolor &lt;/ b&gt; &lt;var&gt; sit &lt;/ var&gt; amet. &lt;/ P&gt;<br></br></pre>
Тут теги &lt;var&gt; і &lt;b&gt; ніяк не перекриваються і являють собою сусідні елементи. Те, що вони розташовані всередині контейнера &lt;p&gt;, ніяк не впливає на їх ставлення.<br></br>
Для управління стилем сусідніх елементів використовується символ плюса (+), який встановлюється між двома селекторами. Загальний синтаксис наступний.<br></br>
<pre>Селектор 1 + Селектор 2 &#123;Опис правил стилю&#125;<br></br></pre>
Пробіли навколо плюса не обов’язкові, стиль при такому записі застосовується до селектора 2, але тільки в тому випадку, якщо він є сусіднім для селектора 1 і слідує відразу після нього.<br></br>
Дочірнім називається елемент, який безпосередньо розташовується всередині батьківського елементу.<br></br>
<pre>&lt;p&gt; Lorem ipsum &lt;b&gt; dolor &lt;/ b&gt; sit amet. &lt;/ P&gt;<br></br></pre>
У цьому прикладі тег &lt;b&gt; є дочірнім по відношенню до тегу &lt;p&gt;, оскільки він знаходиться всередині цього контейнера. Відповідно &lt;p&gt; виступає як батьківський &lt;b&gt;.<br></br>
Селектор 1&gt; Селектор 2 &#123;Опис правил стилю&#125;<br></br>
Стиль застосовується до селектора 2, але тільки в тому випадку, якщо він є дочірнім для селектора 1.<br></br>
Селектор атрибуту<br></br>
Простий селектор атрибуту<br></br>
Встановлює стиль для елемента, якщо заданий специфічний атрибут тега. Його значення в даному випадку не важливо. Синтаксис застосування такого селектора наступний:<br></br>
<pre>[атрибут] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор[атрибут] &#123;Опис правил стилю&#125;<br></br></pre>
Стиль застосовується до тих тегів, усередині яких доданий вказаний атрибут. Пробіл між ім’ям селектора і квадратними дужками не допускається.<br></br>
Атрибут із значенням<br></br>
Встановлює стиль для елемента в тому випадку, якщо задано певне значення специфічного атрибута. Синтаксис застосування наступний:<br></br>
<pre>[атрибут = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор[атрибут = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
У першому випадку стиль застосовується до всіх тегам, які містять вказане значення. А в другому - тільки до певних селекторів.<br></br>
Значення атрибута починається з певного тексту<br></br>
Встановлює стиль для елемента в тому випадку, якщо значення атрибута тега починається з вказаного тексту. Синтаксис застосування наступний:<br></br>
<pre>[Атрибут ^ = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор[атрибут ^ = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
У першому випадку стиль застосовується до всіх елементів, у яких значення атрибута починаються з вказаного тексту. А в другому - тільки до певних селекторів. Використання лапок не обов’язково, але тільки якщо значення містить латинські букви і без пробілів. <br></br>
Припустимо, що на сайті потрібно розділити стиль звичайних і зовнішніх посилань - посилання, які ведуть на інші сайти. Щоб не вводити в тег &lt;a&gt; новий клас, скористаємося селекторами атрибутів. Зовнішні посилання характеризуються додаванням до адреси протоколу, наприклад, для доступу до гіпертекстових документів використовується протокол HTTP. Тому зовнішні посилання починаються з ключового слова http: //, його і додаємо до селектора A,<br></br>
<pre>&lt;style&gt;<br></br>
   A[href^="http://"] &#123; <br></br>
    font-weight: bold /* Жирний шрифт */<br></br>
   &#125;<br></br>
  &lt;/style&gt;<br></br></pre>
Значення атрибута закінчується певним текстом<br></br>
Встановлює стиль для елемента в тому випадку, якщо значення атрибута закінчується зазначеним текстом. Синтаксис застосування наступний:<br></br>
<pre>[Атрибут $ = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор[атрибут $ = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
У першому випадку стиль застосовується до всіх елементів у яких значення атрибуту завершується заданих текстом. А в другому - тільки до певних селекторів.<br></br>
Таким способом можна автоматично розділяти стиль для посилань на сайти домену ua і для посилань на сайти інших доменів зразок com.<br></br>
<pre>[href$=".ua"] &#123; /* якщо посилання .ua */<br></br>
    background: url(images/ru.png) no-repeat 0 6px; /* Додаємо фоновый малюнок */ <br></br>
    padding-left: 12px; /* текст зміщується впаво */ <br></br>
   &#125; <br></br></pre>
Значення атрибута містить вказаний текст<br></br>
Можливі варіанти, коли стиль слід застосувати до тегу з певним атрибутом, при цьому частиною його значення є деякий текст. При цьому точно не відомо, в якому місці значення включений даний текст - на початку, всередині або наприкінці. У подібному випадку слід використовувати такий синтаксис:<br></br>
<pre>[атрибут * = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор[атрибут * = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>&lt;style&gt;<br></br>
   [href*="htmlbook"] &#123; <br></br>
    background: yellow; /* Желтый цвет фона */<br></br>
   &#125;<br></br>
  &lt;/style&gt;<br></br></pre>
Одне з кількох значень атрибуту<br></br>
Деякі значення атрибутів можуть перераховуватися через пробіл, наприклад імена класів. Щоб задати стиль при наявності у списку необхідного значення застосовується наступний синтаксис:<br></br>
<pre>[атрибут ~ = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор [атрибут ~ = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
Стиль застосовується в тому випадку, якщо у атрибуту є вказане значення або воно входить в список значень, розділюваних пробілом<br></br>
<pre>&lt;!DOCTYPE HTML&gt; <br></br>
&lt;html&gt; <br></br>
 &lt;head&gt; <br></br>
  &lt;meta charset="utf-8"&gt; <br></br>
  &lt;title&gt;Блок&lt;/title&gt; <br></br>
  &lt;style&gt; <br></br>
   [class~="block"] h3 &#123; color: green; &#125; <br></br>
  &lt;/style&gt; <br></br>
 &lt;/head&gt;  <br></br>
 &lt;body&gt; <br></br>
  &lt;div class="block tag"&gt; <br></br>
   &lt;h3&gt;Заголовок&lt;/h3&gt; <br></br>
  &lt;/div&gt; <br></br>
 &lt;/body&gt; <br></br>
&lt;/html&gt;<br></br></pre>
Дефіс у значенні атрибуту<br></br>
В іменах ідентифікаторів і класів дозволено використовувати символ дефіса (-), що дозволяє створювати значущі значення атрибутів id і class. Для зміни стилю елементів, у значенні яких застосовується дефіс, слід скористатися наступним синтаксисом:<br></br>
<pre>[атрибут | = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор [атрибут | = "значення"] &#123;Опис правил стилю&#125;<br></br></pre>
Стиль застосовується до елементів, у яких атрибут починається з вказаного значення або з фрагмента значення, після якого йде дефіс<br></br>
Всі перераховані методи можна комбінувати між собою, визначаючи стиль для елементів, які містять два і більше атрибута. У подібних випадках квадратні дужки йдуть підряд.<br></br>
<pre>[атрибут1 = "значення1"] [атрібут2 = "значення2"] &#123;Опис правил стилю&#125;<br></br></pre>
<pre>Селектор [атрибут1 = "значення1"] [атрібут2 = "значення2"] &#123;Опис правил стилю&#125;<br></br></pre>
Псевдокласи<br></br>
Псевдокласи визначають динамічний стан елементів, який змінюється з часом або за допомогою дій користувача, а також положення в дереві документа. Прикладом такого стану служить текстове посилання, яка змінює свій колір при наведенні на неї курсора миші. При використанні псевдокласів браузер не перевантажує поточний документ, тому за допомогою псевдокласів можна отримати різні динамічні ефекти на сторінці.<br></br>
Синтаксис застосування псевдокласів: спочатку вказується селектор, до якого додається псевдоклас, потім слідує двокрапка, після якого йде ім’я псевдокласу. <br></br>
<pre>Селектор: Псевдоклас &#123;Опис правил стилю&#125;<br></br></pre>
Допускається застосовувати псевдокласи до імен ідентифікаторів або класів (A.menu: hover &#123;color: green&#125;), а також до контекстних селекторів (.Menu A: hover &#123;background: # fc0&#125;). Якщо псевдоклас вказується без селектора попереду (: hover), то він буде застосовуватися до всіх елементів документа<br></br>
Умовно всі псевдокласи діляться на три групи:<br></br>
<pre>●	визначають стан елементів;<br></br>
●	мають відношення до дерева елементів;<br></br>
●	вказують мову тексту.<br></br></pre>
Псевдокласи, які визначають стан елементів<br></br>
До цієї групи відносяться псевдокласи, які розпізнають поточний стан елемента і застосовують стиль тільки для цього стану.<br></br>
<pre>: Active - відбувається при активації користувачем елементу. Наприклад, посилання стає активною, якщо навести на нього курсор і клацнути мишкою. Незважаючи на те, що активним може стати практично будь-який елемент сторінки, псевдоклас: active використовується переважно для посилань.<br></br></pre>
<pre>: Link - застосовується до невідвідування посиланнях, тобто таких посиланнях, на які користувач ще не натискав. Браузер деякий час зберігає історію відвідувань, тому посилання може бути позначене як відвідане хоча б тому, що по ньому був зафіксований перехід раніше. Записи A &#123;...&#125; і A: link &#123;...&#125; за своїм результатом рівноцінні, оскільки в браузері дає один і той же ефект, тому псевдоклас: link можна не вказувати. Винятком є якорі, на них дія: link не поширюється.<br></br></pre>
<pre>: Focus - застосовується до елемента при отриманні ним фокусу. Наприклад, для текстового поля форми отримання фокусу означає, що курсор встановлений в полі, і за допомогою клавіатури можна вводити в нього текст. Результат буде видно тільки для тих елементів, які можуть отримати фокус. Зокрема, це  &lt;a&gt;, &lt;input&gt;, &lt;select&gt; і &lt;textarea&gt;.<br></br></pre>
<pre>: Hover - активізується тоді, коли курсор миші знаходиться в межах елемента, але клацання по ньому не відбувається. <br></br>
Приклад таблиці, яка виділяє рядок, на який наведено курсор.<br></br>
TR: hover &#123; background: #fc0; &#125;<br></br></pre>
<pre>: Visited - даний псевдоклас застосовується до відвіданих посилань. Зазвичай таке посилання змінює свій колір за замовчуванням на фіолетовий, але за допомогою стилів колір і інші параметри можна задати самостійно.<br></br></pre>
Псевдокласи, що мають відношення до дерева документа<br></br>
До цієї групи відносяться псевдокласи, які визначають положення елемента в дереві документа і застосовують до нього стиль в залежності від його статусу.<br></br>
<pre>: First-child - застосовується до першого дочірньому елементу селектора, який розташований в дереві елементів документа. Щоб стало зрозуміло, про що мова: <br></br></pre>
<pre>
&lt;!DOCTYPE HTML&gt;<br></br>
&lt;html&gt;<br></br>
 &lt;head&gt;<br></br>
  &lt;meta charset="utf-8"&gt;<br></br>
  &lt;title&gt;Псевдоклассы&lt;/title&gt;<br></br>
  &lt;style type="text/css"&gt;<br></br>
   B:first-child &#123;<br></br>
    color: red; /* Красный цвет текста */<br></br>
   &#125;<br></br>
  &lt;/style&gt;<br></br>
 &lt;/head&gt;<br></br>
 &lt;body&gt;<br></br>
  &lt;p&gt;&lt;b&gt;Lorem ipsum&lt;/b&gt; dolor sit amet, &lt;b&gt;consectetuer&lt;/b&gt; <br></br>
  adipiscing &lt;b&gt;elit&lt;/b&gt;, sed diem nonummy nibh euismod tincidunt <br></br>
  ut lacreet dolore magna aliguam erat volutpat.&lt;/p&gt;<br></br>
  &lt;p&gt;&lt;b&gt;Ut wisis enim&lt;/b&gt; ad minim veniam, &lt;b&gt;quis nostrud&lt;/b&gt; <br></br>
  exerci tution ullamcorper suscipit lobortis nisl ut aliquip ex ea &lt;b&gt;commodo <br></br>
  consequat&lt;/b&gt;.&lt;/p&gt;<br></br>
 &lt;/body&gt;<br></br>
&lt;/html&gt;<br></br></pre>
Псевдокласи, що вказують мову тексту<br></br>
<pre>: Lang - для документів, одночасно містять тексти на декількох мовах має значення дотримання правил синтаксису, характерні для тієї чи іншої мови. За допомогою псевдокласів можна змінювати стиль оформлення іноземних текстів, а також деякі налаштування.<br></br>
Визначає мову, яка використовується в документі або його фрагменті.</pre> У коді HTML мову встановлюється через атрибут charset тега &lt;meta&gt;. <br></br>
За допомогою псевдокласу: lang можна задавати певні налаштування, характерні для різних мов, наприклад, вид лапок в цитатах. Синтаксис наступний: lang (мова) &#123;... &#125;<br></br>
В якості мови можуть виступати наступні значення: ru - російська; en - англійська; de - німецька; fr - французька; it – італійська і т.д.<br></br>
Псевдоелементи<br></br>
Псевдоелементи - це умовні фіктивні елементи, які є частиною існуючих елементів або вводяться в документ додатково. Вони дозволяють задати стиль елементів не визначених в дереві елементів документа, а також генерувати вміст, якого немає у вихідному коді тексту. Псевдоелемент і  псевдоклас, точки зору синтаксису - це фактично одне і те ж. Різниця тільки в обраних елементах.<br></br>
<pre>:First-letter - визначає стиль першого символу в тексті елемента, до якого додається. <br></br></pre>
<pre>:First-line - визначає стиль першого рядка блокового тексту.<br></br></pre>
<pre>:After - застосовується для вставки призначеного контенту після вмісту елементу. Цей псевдоелемент працює спільно зі стильовим властивістю content, яка визначає вміст для вставки. <br></br></pre>
Приклад <br></br>
<pre>
&lt;!DOCTYPE HTML&gt; <br></br>
&lt;html&gt; <br></br>
 &lt;head&gt; <br></br>
  &lt;meta charset="utf-8"&gt; <br></br>
  &lt;title&gt;Псевдоелементи&lt;/title&gt; <br></br>
  &lt;style&gt; <br></br>
   p.new:after &#123;<br></br>
    content: "- Новье!"; / * Додаємо після тексту абзацу * /<br></br>
   &#125;<br></br>
  &lt;/style&gt; <br></br>
 &lt;/head&gt;  <br></br>
 &lt;body&gt; <br></br>
   &lt;p class = "new"&gt; Ловля лева в пустелі за допомогою методу золотого перетину. &lt;/p&gt;<br></br>
  &lt;p&gt; Метод ловлі лева простим перебором. &lt;/p&gt;<br></br>
  &lt;/div&gt; <br></br>
 &lt;/body&gt; <br></br>
&lt;/html&gt;<br></br></pre>
<pre>:Before - По своїй дії :before аналогічний псевдоелементу :after, але вставляє контент до вмісту елементу.<br></br></pre>
При створенні стилю для сайту, коли одночасно використовується багато селекторів, можлива <a id="fourth"></a> поява повторюваних стильових правил. Щоб не повторювати двічі одні і ті ж елементи, їх можна згрупувати для зручності подання та скорочення коду. Селектори групуються у вигляді списку тегів, розділених між собою комами. В групу можуть входити не тільки селектори тегів, але також ідентифікатори і класи. Загальний синтаксис наступний:<br></br>
<pre>Селектор 1, Селектор 2, ... Селектор N &#123;Опис правил стилю&#125;<br></br></pre>
При такому записі правила стилю застосовуються до всіх селекторів, перерахованих в одній групі.<br></br>
  
    </p>
    </div>


    <div className={style.content}>
                <h2>Спадкування</h2>
                <p>
                
                Спадкування називається перенесення правил форматування для елементів, що знаходяться всередині інших. Такі елементи є дочірніми, і вони успадковують деякі стильові властивості своїх батьків, всередині яких розташовуються.<br></br>
Розберемо спадкування на прикладі таблиці. Особливістю таблиць можна вважати строгу ієрархічну структуру тегів. Спочатку слід контейнер &lt;table&gt; всередині якого додаються теги &lt;tr&gt;, а потім йде тег &lt;td&gt;. Якщо у стилях для селектора TABLE задати колір тексту, то він автоматично встановлюється для вмісту комірок.<br></br>
<pre>TABLE &#123;<br></br>
     color: red; / * Колір тексту * /<br></br>
     background: # 333; / * Колір фону таблиці * /<br></br>
     border: 2px solid red; / * Червона рамка навколо таблиці * /<br></br>
&#125;<br></br></pre>
У даному прикладі для всієї таблиці встановлений червоний колір тексту, тому в комірках він також застосовується, оскільки тег &lt;td&gt; успадковує властивості тега &lt;table&gt;. При цьому слід розуміти, що не всі стильові властивості успадковуються. Так, border задає рамку навколо таблиці в цілому, але не навколо комірки. Аналогічно не успадковується значення властивості background. Тоді чому колір фону у комірок в даному прикладі темний, раз він не успадковується? Справа в тому, що у властивості background як значення за замовчуванням виступає transparent, тобто прозорість. Таким чином колір фону батьківського елементу «проглядає» крізь дочірній елемент.<br></br>
Щоб визначити, успадковується значення стильового властивості чи ні, потрібно зазирнути в довідник властивостей CSS. <br></br><a id="fifth"></a>
Успадкування дозволяє задавати значення деяких властивостей одного разу, визначаючи їх для батьків верхнього рівня. Допустимо, потрібно встановити колір і шрифт для основного тексту. Досить скористатися селектором BODY, додати для нього бажані властивості, і колір тексту всередині абзаців та інших текстових елементів поміняється автоматично.<br></br>


  
    </p>
    </div>


    <div className={style.content}>
                <h2>Каскадування</h2>
                <p>
                
                Абревіатура CSS розшифровується як Cascading Style Sheets (каскадні таблиці стилів), де одним з ключових слів виступає «каскад». Під каскадом у даному випадку розуміється одночасне застосування різних стильових правил до елементів документа - за допомогою підключення декількох стильових файлів, спадкування властивостей та інших методів. Щоб в подібній ситуації браузер розумів, яке в підсумку правило застосовувати до елемента, і не виникало конфліктів в поведінці різних браузерів, введені певні пріоритети.<br></br>
Нижче наведені пріоритети браузерів, якими вони керуються при обробці стильових правил.<br></br>
<pre>1.	Стиль користувача з додаванням !important.<br></br>
2.	Стиль автора з додаванням !important.<br></br>
3.	Стиль користувача.<br></br>
4.	Стиль автора. <br></br>
5.	Стиль браузера.<br></br></pre>
Найнижчим пріоритетом має стиль браузера - оформлення, яке за умовчанням застосовується до елементів веб-сторінки браузером. Це оформлення можна побачити в разі «голого» HTML, коли до документа не додається ніяких стилів.<br></br>
Ключове слово !important грає роль в тому випадку, коли користувачі підключають свою власну таблицю стилів. Якщо виникає протиріччя, коли стиль автора сторінки і користувача для одного і того ж елемента не збігається, то !important дозволяє підвищити пріоритет стилю.<br></br>
Cинтаксис застосування !important наступний: cпочатку пишеться бажана стильова властивість, <a id="sixth"></a> потім через двокрапку її значення, а в кінці після пробілу вказується ключове слово !important.<br></br>
<pre>Властивість: значення !important;<br></br></pre>

  
    </p>
    </div>

    <div className={style.content}>
                <h2>Форматування тексту</h2>
                <p>
                
               
                ●	inherit - успадковує значення батька;<br></br>
●	color: колір | inherit - задає колір;<br></br>
●	background: [background-attachment || background-color || background-image || background-position || background-repeat] | inherit<br></br>
❖	background-attachment: fixed | scroll | inherit<br></br>
❏	fixed - робить фонове зображення елемента нерухомим;<br></br>
❏	scroll - дозволяє переміщатися фону разом з вмістом;<br></br>
❖	background-color: колір | transparent | inherit<br></br>
❏	transparent – прозорий фон;<br></br>
❖	background-image: url(файл) | none | inherit – фонове зображення;<br></br>
❖	background-position - задає початкове положення фонового зображення, встановленого за допомогою властивості background-image. Два значення: положення по горизонталі (може бути - left, center, right) і вертикалі (може бути - top, center, bottom). Крім використання ключових слів положення також можна задавати у відсотках, пікселах або інших одиницях. Якщо застосовуються ключові слова, то порядок їх проходження не має значення, при процентній запису спочатку задається положення малюнка по горизонталі, а потім, через пропуск, положення по вертикалі;<br></br>
❖	background-repeat - визначає, як буде повторюватися фонове зображення, встановлене за допомогою властивості background-image. Можна встановити повторення малюнка тільки по горизонталі, по вертикалі або в обидві сторони. Допустимо вказувати два значення, перше ключове слово задає повторення по горизонталі, друге по вертикалі.<br></br>
❏	no-repeat - встановлює одне фонове зображення в елементі без його повторень, положення якого визначається властивістю background-position;<br></br>
❏	repeat - фонове зображення повторюється по горизонталі і вертикалі;<br></br>
❏	repeat-x - фоновий малюнок повторюється тільки по горизонталі;<br></br>
❏	repeat-y - фоновий малюнок повторюється тільки по вертикалі. <br></br>
 background: url(images/hand.png) repeat-y #fc0; /* Цвет фона,  путь к фоновому изображению и повторение фона по вертикали */<br></br>
font: [font-style||font-variant||font-weight] font-size [/line-height] font-family | inherit<br></br>
font-style: normal | italic | oblique | inherit<br></br>
●	normal - звичайне написання тексту;<br></br>
●	italic - курсивне зображення;<br></br>
●	oblique - похиле написання. Курсив і похилий шрифт при всій їх схожості не одне і те ж. Курсив це спеціальний шрифт імітує рукописний, похилий ж утворюється шляхом нахилу звичайних знаків вправо;<br></br>
●	font-variant: normal | small-caps | inherit<br></br>
❖	small-caps – задає напис капітелем - ПРИКЛАД ТЕКСТУ<br></br>
●	font-weight: bold|bolder|lighter|normal|100|200|300|400|500|600|700|<br></br>
800|900<br></br>
Нормальне зображення шрифту (яке встановлено за замовчуванням) еквівалентно 400, стандартний напівжирний текст - значенню 700.<br></br>
●	font-size - визначає розмір шрифту елемента. Розмір може бути встановлений декількома способами. Набір констант (xx-small, x-small, small, medium, large, x-large, xx-large) задає розмір, який називається абсолютним. По правді кажучи, вони не зовсім абсолютні, оскільки залежать від налаштувань браузера та операційної системи. Інший набір констант (larger, smaller) встановлює відносні розміри шрифту. Оскільки розмір успадкований від батьківського елементу, ці відносні розміри застосовуються до батьківського елементу, щоб визначити розмір шрифту поточного елементу. Розмір шрифту сильно залежить від значення властивості font-size у батьківського елемента. Сам розмір шрифту визначається як висота від базової лінії до верхньої межі кегельного майданчики, як показано на рис.<br></br>
 <br></br>
●	line-height - встановлює міжрядковий інтервал тексту, відлік ведеться від базової лінії шрифту. За звичайних обставин відстань між рядками залежить від виду та розміру шрифту і визначається браузером автоматично. Від’ємне значення міжрядкового інтервалу не допускається;<br></br>
●	font-family - встановлює сімейство шрифту, яке використовуватиметься для оформлення тексту вмісту. Список шрифтів може включати одне або кілька назв, розділених комою. Якщо в імені шрифту містяться прогалини, наприклад, Trebuchet MS, його необхідно  брати в лапки. Коли браузер зустрічає перший шрифт у списку, він перевіряє його наявність на комп’ютері користувача. Якщо такого шрифту немає, береться наступне ім’я зі списку і також аналізується на присутність. Тому кілька шрифтів збільшує ймовірність, що хоча б один з них буде виявлений на клієнтському комп’ютері. Закінчують список зазвичай ключовим словом, яке описує тип шрифту - serif, sans-serif, cursive, fantasy або monospace. Таким чином, послідовність шрифтів краще починати з екзотичних типів і закінчувати узагальненим ім’ям, яке задає вид накреслення.<br></br>
Приклад  <br></br>
<pre>p &#123;font: bold italic small-caps 12px/14px Forte,”Times New Roman”,Serif;&#125;<br></br></pre>
●	text-align: center | justify | left | right | inherit – вирівнювання тексту;<br></br>
●	text-decoration: [ blink | line-through | overline | underline ] | none | inherit - додає оформлення тексту у вигляді його підкреслення, перекреслення, лінії над текстом і миготіння. Одночасно можна застосувати більше одного стилю, перераховуючи значення через пробіл;<br></br>
●	text-transform: capitalize | lowercase | uppercase | none | inherit - керує перетворенням тексту елемента;<br></br>
❖	capitalize - перший символ кожного слова буде великим. Інші символи свій вигляд не міняють;<br></br>
❖	lowercase - всі символи перетворюються в нижній регістр;<br></br>
❖	uppercase - всі символи перетворюються у верхній регістр;<br></br>
●	text-indent встановлює величину відступу першого рядка блоку тексту (наприклад, для абзацу &lt;p&gt;). Впливу на всі інші рядки не відбувається. Допускається від’ємне значення для створення відступу першого рядка, але слід перевірити, щоб текст не виходив за межі вікна браузера;<br></br>
●	letter-spacing - визначає інтервал між символами в межах елемента. Браузери зазвичай встановлюють відстань між символами, виходячи з типу і виду шрифту, його розмірів і настройок операційної системи. Щоб змінити це значення і застосовується дана властивість. Допустимо використовувати від’ємне значення, але в цьому випадку треба переконатися, що зберігається читабельність тексту;<br></br>
●	word-spacing - встановлює інтервал між словами. Якщо для тексту задано вирівнювання по ширині через text-align, то властивість word-spacing ігнорується;<br></br>
●	list-style: list-style-type || list-style-position || list-style-image | inherit Комбінації значень повинні слідувати в зазначеному порядку: спочатку йде тип маркера, потім положення і картинка. Жодне значення не є обов’язковим, тому невживані можна опустити;<br></br>
●	list-style-type - змінює вигляд маркера для кожного елемента списку. Ця властивість використовується тільки у випадку, коли значення list-style-image встановлено як none. Маркери розрізняються для маркерованого списку (тег &lt;ul&gt;) та нумерованого (тег &lt;ol&gt;).<br></br>
Для маркерованого списку:<br></br>
❖	circle - маркер у вигляді кружка;<br></br>
❖	disc - у вигляді точки;<br></br>
❖	square - у вигляді квадрата.<br></br>
Для нумерованого списку:<br></br>
❖	decimal - арабські числа (1, 2, 3, 4, ...);<br></br>
❖	lower-alpha - рядкові латинські літери (a, b, c, d, ...);<br></br>
❖	lower-greek - рядкові грецькі літери (α, β, γ, δ, ...);<br></br>
❖	lower-roman - римські числа в нижньому регістрі (i, ii, iii, iv, v, ...);<br></br>
❖	upper-alpha - великі латинські літери (A, B, C, D, ...);<br></br>
❖	upper-roman - римські числа в верхньому регістрі (I, II, III, IV, V, ...);<br></br>
❖	none - скасовує маркери для списку.<br></br>
●	list-style-position: inside | outside - визначає, як буде розміщуватися маркер щодо тексту. Є два значення: <br></br>
❖	outside - маркер винесений за межі елемента списку;<br></br>
❖	inside - маркер обтікається текстом;<br></br>
●	list-style-image - вказується шлях до зображення-маркеру;<br></br>
●	float: left | right | none | inherit - визначає, по якій стороні буде вирівнюватися елемент, при цьому інші елементи будуть обтікати його з інших сторін. Коли значення властивості float дорівнює none, елемент виводиться на сторінці як зазвичай, при цьому допускається, що один рядок тексту може бути на тій же лінії, що і сам елемент. Щоб скасувати обтікання, треба після плаваючого елементу розташувати блок з властивістю clear: both;<br></br>
●	border: [border-width || border-style || border-color] | inherit - універсальна властивість border дозволяє одночасно встановити товщину, стиль і колір кордону навколо елемента. Значення можуть йти в будь-якому порядку, розділяючись пробілом, браузер сам визначить, яке з них відповідає потрібній властивості. Для установки межі тільки на певних сторонах елемента, скористайтеся властивостями border-top, border-bottom, border-left, border-right;<br></br>
❖	border-width - задає товщину межі. Зазвичай вказується в пікселях, але також можна вказувати ключовими словами thin (2px), medium (4px) і thick (6px);<br></br>
❖	border-color - визначає колір межі;<br></br>
❖	border-style - визначає стиль межі. Вони можуть бути наступними:<br></br>
 <br></br>
●	margin - встановлює величину відступу від краю елемента. Відступом є простір від кордону поточного елемента до внутрішньої межі його батьківського елементу або до найближчого елемента. Розмірність може бути як в значеннях довжини (px, pt, em і т.д.), так і в значенні auto;<br></br>
●	padding - встановлює значення полів навколо вмісту елементу. Полем називається відстань від внутрішнього краю рамки елемента до уявного прямокутника, що обмежує його вміст. Щоб встановлювати відступи і поля відповідно зверху, справа, знизу, зліва потрібно використовувати ключові слова top, right, bottom, left.<br></br>
Наприклад: margin-top: 5px; або padding-bottom: 25px;<br></br>
Значення зовнішніх відступів в деяких випадках може бути і від’ємним.<br></br>
Існує скорочений запис:<br></br>
margin: 5px; - застосовується до всіх полів;<br></br>
margin: 5px 10px; - перше число означає відступ знизу і зверху, друге - ліворуч і праворуч;<br></br>
margin: 5px 10px 4px; - перше число означає відступ зверху, друге - ліворуч і праворуч, третє - знизу;<br></br>
margin: 5px 10px 4px 6px; - по порядку - зверху, справа, знизу, зліва.<br></br>
 <br></br>
●	position: absolute | fixed | relative | static | inherit	- встановлює спосіб позиціонування елемента щодо вікна браузера або інших об’єктів на веб-сторінці;<br></br>
❖	absolute - вказує, що елемент абсолютно позиціонується, при цьому інші елементи відображаються на веб-сторінці немов абсолютно позиціонувати елемента і немає. Положення елемента задається властивостями left, top, right і bottom, також на положення впливає значення властивості position батьківського елементу. Так, якщо в батька значення position встановлено як static або батька немає, то відлік координат ведеться від краю вікна браузера. Якщо у батька значення position задано як fixed, relative або absolute, то відлік координат ведеться від краю батьківського елементу;<br></br>
❖	fixed - по своїй дії це значення близьке до absolute, але на відміну від нього прив'язується до зазначеної властивостями left, top, right і bottom точці на екрані і не міняє свого положення при прокрутці веб-сторінки;<br></br>
❖	relative - положення елемента встановлюється щодо його вихідного місця. Додавання властивостей left, top, right і bottom змінює позицію елемента і зрушує його в ту або іншу сторону від первісного розташування;<br></br>
❖	static - елементи відображаються як зазвичай. Використання властивостей left, top, right і bottom не призводить до якихось результатів;<br></br>
●	display: block | inline | inline-block | inline-table | list-item | none | run-in | table | table-caption | table-cell | table-column-group | table-column | table-footer-group | table-header-group | table-row | table-row-group - багатоцільове властивість, яка визначає, як елемент повинен бути показаний в документі;<br></br>
❖	block - елемент показується як блоковий. Застосування цього значення для вбудованих елементів, наприклад тега &lt;span&gt;, змушує його вести подібно блокам - відбувається перенесення рядків на початку і в кінці вмісту;<br></br>
❖	inline - елемент відображається як вбудований. Використання блокових тегів, таких як &lt;div&gt; і &lt;p&gt;, автоматично створює перенос і показує вміст цих тегів з нового рядка. Значення inline скасовує цю особливість, тому вміст блокових елементів починається з того місця, де закінчився попередній елемент;<br></br>
❖	inline-block - це значення генерує блоковий елемент, який обтікається іншими елементами веб-сторінки подібно вбудованому елементу. Фактично такий елемент по своїй дії схожий на вбудовані елементи (зразок тега &lt;img&gt;). При цьому його внутрішня частина форматується як блоковий елемент, а сам елемент - як вбудований;<br></br>
❖	inline-table - визначає, що елемент є таблицею як при використанні тега &lt;table&gt;, але при цьому таблиця є вбудованим елементом і відбувається її обтікання іншими елементами, наприклад, текстом;<br></br>
❖	list-item - елемент виводиться як блоковий і додається маркер списку;<br></br>
❖	none - тимчасово видаляє елемент із документа. Займане ним місце не резервується і веб-сторінка формується так, немов елемента і не було. Змінити значення і зробити знову видимим елемент можна за допомогою скриптів, звертаючись до властивостей через об'єктну модель. У цьому випадку відбувається переформатування даних на сторінці з обліком знову доданого елемента;<br></br>
❖	run-in - встановлює елемент як блоковий або вбудований в залежності від контексту;<br></br>
❖	table - визначає, що елемент є блоковою таблицею подібно використанню тега &lt;table&gt;;<br></br>
❖	table-caption - задає заголовок таблиці подібно застосуванню тега &lt;caption&gt;;<br></br>
❖	table-cell - вказує, що елемент являє собою комірку таблиці (тег &lt;td&gt; або &lt;th&gt;);<br></br>
❖	table-column - призначає елемент колонкою таблиці, немов був доданий тег &lt;col&gt;;<br></br>
❖	table-column-group - визначає, що елемент є групою однієї чи більше колонок таблиці, як при використанні тега &lt;colgroup&gt;;<br></br>
❖	table-footer-group - використовується для зберігання однієї або кількох рядків осередків, які відображаються в самому низу таблиці. По своїй дії схоже з роботою тега &lt;tfoot&gt;;<br></br>
❖	table-header-group - елемент призначений для зберігання однієї або кількох рядків осередків, які представлені вгорі таблиці. По своїй дії схоже з роботою тега &lt;thead&gt;;<br></br>
❖	table-row - елемент відображається як рядок таблиці (тег &lt;tr&gt;);<br></br>
❖	table-row-group - створює структурний блок, що складається з декількох рядків таблиці аналогічно дії тега &lt;tbody&gt;.<br></br>
 <br></br>

  
    </p>
    </div>

    </div>
        </div>
    );
};

export default Aboutcss;